This file is a merged representation of the entire codebase, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
components/
  about/
    CourseCard.astro
    ExperienceCard.astro
    ProfileColumn.astro
    SocialMediaButton.astro
  projects/
    ProjectCard.astro
  ui/
    Gradient/
      color-updater.js
      gradient.js
      GradientButton.astro
      GradientCanvas.astro
    BaseCard.astro
    BaseHead.astro
    DesktopNav.astro
    Footer.astro
    FormattedDate.astro
    GradientDebug.astro
    HeaderLink.astro
    MobileNav.astro
    NavBar.astro
content/
  blog/
    first-post.md
    markdown-style-guide.md
    second-post.md
    third-post.md
    using-mdx.mdx
layouts/
  BaseLayout.astro
  BlogPost.astro
pages/
  blog/
    [...slug].astro
    index.astro
  contact.astro
  index.astro
  projects.astro
  rss.xml.js
scripts/
  contact.js
  gradient-controller.js
styles/
  global.css
consts.ts
content.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="components/about/CourseCard.astro">
---
import BaseCard from '../ui/BaseCard.astro';

interface Props {
  title: string;
  provider: string;
  year: string;
  description: string;
}

const { title, provider, year, description } = Astro.props;
---

<BaseCard className="experience-item">
  <div class="mb-3">
    <h3 class="text-[#FFFFFF] text-xl font-medium">{title}</h3>
    <span class="text-[#C1C1C1] text-sm">{provider}, {year}</span>
  </div>
  <p class="text-[#FFFFFF] opacity-70">
    {description}
  </p>
  <slot />
</BaseCard>
</file>

<file path="components/about/ExperienceCard.astro">
---
import BaseCard from '../ui/BaseCard.astro';

interface Props {
  title: string;
  duration: string;
  company?: string;
  description?: string[];
  skills?: string[];
}

const { title, duration, company, description = [], skills = [] } = Astro.props;
---

<BaseCard className="experience-item mb-10">
  <div class="flex justify-between items-start mb-3">
    <h3 class="text-[#FFFFFF] text-xl font-medium">{title}{company && ` • ${company}`}</h3>
    <span class="text-[#C1C1C1] text-sm">{duration}</span>
  </div>
  
  {description.length > 0 && (
    <ul class="text-[#FFFFFF] opacity-70 space-y-2">
      {description.map((item) => (
        <li>{item}</li>
      ))}
    </ul>
  )}
  
  {Astro.slots.has('default') && (
    <div class="text-[#FFFFFF] opacity-70 mt-2">
      <slot />
    </div>
  )}
  
  {skills.length > 0 && (
    <div class="skills mt-4">
      {skills.map((skill) => (
        <span class="inline-block px-4 py-2 backdrop-blur-md bg-black/20 border border-zinc-800/30 text-zinc-300 rounded-full text-sm mr-2 mb-2 hover:bg-black/30 transition-colors">
          {skill}
        </span>
      ))}
    </div>
  )}
</BaseCard>
</file>

<file path="components/about/ProfileColumn.astro">
---
import portraitImage from '../../assets/Portrait.jpg';
import { Image } from 'astro:assets';
import GradientButton from '../ui/Gradient/GradientButton.astro';
const { name, nickname } = Astro.props;
---

<div
    class="lg:w-2/5 lg:fixed lg:h-screen flex flex-col justify-center items-center px-8 pt-8 lg:pt-0 pb-16"
>
    <div class="profile-image-container mb-12 flex justify-center w-full ">        
        <Image
            src={portraitImage}
            alt={name}
            loading="eager"
            class="w-72 object-cover rounded-[36px] border-2 border-gray-700/30"
        />
    </div>
    <div class="text-content mb-1 px-0">
        <div class="flex justify-center">
            <h1
                class="text-[#FFFFFF] text-6xl whitespace-nowrap font-medium opacity-60 antialiased drop-shadow-xl"
            >
                {name}
            </h1>
        </div>
        <h2 class="text-[#C1C1C1] text-4xl mt-1 mb-2 opacity-50">{nickname}</h2>
        
        <div class="social-links flex gap-3 w-72 justify-start mt-2">
            <slot />
        </div>

        <!-- Gradient theme buttons -->
        <div class="gradient-controls mt-8">
            <GradientButton/>
        </div>
    </div>
</div>
</file>

<file path="components/about/SocialMediaButton.astro">
---
interface Props {
  platform: 'twitter' | 'github' | 'youtube' | 'linkedin' | 'instagram' | 'facebook';
  username: string;
}

const { platform, username } = Astro.props;

const icons = {
  twitter: '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22 4s-.7 2.1-2 3.4c1.6 10-9.4 17.3-18 11.6 2.2.1 4.4-.6 6-2C3 15.5.5 9.6 3 5c2.2 2.6 5.6 4.1 9 4-.9-4.2 4-6.6 7-3.8 1.1 0 3-1.2 3-1.2z"></path></svg>',
  github: '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22"></path></svg>',
  youtube: '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M22.54 6.42a2.78 2.78 0 0 0-1.94-2C18.88 4 12 4 12 4s-6.88 0-8.6.46a2.78 2.78 0 0 0-1.94 2A29 29 0 0 0 1 11.75a29 29 0 0 0 .46 5.33A2.78 2.78 0 0 0 3.4 19c1.72.46 8.6.46 8.6.46s6.88 0 8.6-.46a2.78 2.78 0 0 0 1.94-2 29 29 0 0 0 .46-5.25 29 29 0 0 0-.46-5.33z"></path><polygon points="9.75 15.02 15.5 11.75 9.75 8.48 9.75 15.02"></polygon></svg>',
  linkedin: '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z"></path><rect x="2" y="9" width="4" height="12"></rect><circle cx="4" cy="4" r="2"></circle></svg>',
  instagram: '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="2" y="2" width="20" height="20" rx="5" ry="5"></rect><path d="M16 11.37A4 4 0 1 1 12.63 8 4 4 0 0 1 16 11.37z"></path><line x1="17.5" y1="6.5" x2="17.51" y2="6.5"></line></svg>',
  facebook: '<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M18 2h-3a5 5 0 0 0-5 5v3H7v4h3v8h4v-8h3l1-4h-4V7a1 1 0 0 1 1-1h3z"></path></svg>',
};

const icon = icons[platform];
const platformNames = {
  twitter: 'Twitter',
  github: 'GitHub',
  youtube: 'YouTube',
  linkedin: 'LinkedIn',
  instagram: 'Instagram',
  facebook: 'Facebook'
};
---

<a 
  href={`https://www.${platform}.com/${username}`} 
  class="social-link" 
  aria-label={`${platformNames[platform]} profile`}
  target="_blank"
  rel="noopener noreferrer"
>
  <span class="icon" set:html={icon}></span>
  <span class="tooltip">{platformNames[platform]}</span>
</a>

<style>
  .social-link {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 44px;
    height: 44px;
    color: #e4e4e7;
    background-color: rgba(0, 0, 0, 0.3);
    border-radius: 12px;
    border: 1px solid rgba(113, 113, 122, 0.2);
    backdrop-filter: blur(10px);
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
    overflow: hidden;
  }

  .social-link:hover {
    transform: translateY(-4px);
    background-color: rgba(39, 39, 42, 0.5);
    border-color: rgba(161, 161, 170, 0.4);
    color: #ffffff;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.2), 0 4px 6px -2px rgba(0, 0, 0, 0.1);
  }
  
  .social-link:active {
    transform: translateY(-2px);
  }

  .icon {
    display: flex;
    opacity: 0.9;
    z-index: 1;
    filter: drop-shadow(0 1px 1px rgba(0, 0, 0, 0.1));
    transition: transform 0.2s ease;
  }
  
  .social-link:hover .icon {
    transform: scale(1.1);
  }
  
  /* Animated glow effect */
  .social-link::before {
    content: '';
    position: absolute;
    inset: -1px;
    z-index: 0;
    background: linear-gradient(
      135deg, 
      rgba(255, 255, 255, 0.1), 
      rgba(255, 255, 255, 0.05), 
      transparent, 
      transparent
    );
    border-radius: 12px;
    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .social-link:hover::before {
    opacity: 1;
  }
  
  /* Tooltip */
  .tooltip {
    position: absolute;
    bottom: -30px;
    left: 50%;
    transform: translateX(-50%) translateY(8px);
    padding: 0.25rem 0.75rem;
    border-radius: 6px;
    background-color: rgba(0, 0, 0, 0.75);
    color: white;
    font-size: 0.75rem;
    white-space: nowrap;
    pointer-events: none;
    opacity: 0;
    transition: opacity 0.2s ease, transform 0.2s ease;
  }
  
  .social-link:hover .tooltip {
    opacity: 1;
    transform: translateX(-50%) translateY(0);
  }
</style>
</file>

<file path="components/projects/ProjectCard.astro">
---
import BaseCard from "../ui/BaseCard.astro";
import { Image } from "astro:assets";
import type { ImageMetadata } from 'astro';


interface Props {
    title: string;
    description: string;
    technologies?: string[];
    liveLink?: string;
    sourceLink?: string;
    notebookLink?: string; // Added notebook link property
    imageUrl: ImageMetadata;
    imageAlt?: string;
    isDataScienceProject?: boolean; // Flag to determine if it's a data science project
}

const {
    title,
    description,
    technologies = [],
    liveLink = "#",
    sourceLink = "#",
    notebookLink = "#", // Default value
    imageUrl,
    imageAlt = title,
    isDataScienceProject = false // Default to false
} = Astro.props;
---

<BaseCard className="project-card mb-6 hover-scale">
    <div class="flex flex-col md:flex-row gap-4 p-4">
        <div class="w-full md:w-2/5 lg:w-1/3">
            <div
                class="project-image-container rounded-2xl overflow-hidden h-52"
            >
                {imageUrl ? (
                    <Image
                        alt={imageAlt}
                        src={imageUrl}
                        width={1000}
                        height={500}
                        loading="lazy"
                        class="w-full h-full object-cover transition-transform hover:scale-105"
                    />
                ) : (
                    <div class="w-full h-full flex items-center justify-center bg-gradient-to-br from-zinc-800 to-zinc-900">
                        <div class="flex flex-col items-center text-center p-4">
                            <svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-photo mb-3 text-zinc-500" width="36" height="36" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                <path d="M15 8h.01" />
                                <path d="M3 6a3 3 0 0 1 3 -3h12a3 3 0 0 1 3 3v12a3 3 0 0 1 -3 3h-12a3 3 0 0 1 -3 -3v-12z" />
                                <path d="M3 16l5 -5c.928 -.896 2.072 -.896 3 0l5 5" />
                                <path d="M14 14l1 -1c.928 -.896 2.072 -.896 3 0l3 3" />
                            </svg>
                            <span class="text-zinc-400 text-sm">Image Unavailable</span>
                        </div>
                    </div>
                )}
            </div>
        </div>
        <div class="w-full md:w-3/5 lg:w-2/3">
            <h3 class="text-[#FFFFFF] text-2xl font-semibold antialiased tracking-tight">
                {title}
            </h3>
            <div class="flex flex-wrap gap-2 my-3">
                {
                    technologies.map((tech) => (
                        <span class="px-3 py-1 text-xs font-medium rounded-full bg-zinc-800/90 text-zinc-300 border border-zinc-700/50 shadow-sm">
                            {tech}
                        </span>
                    ))
                }
            </div>
            <p class="text-[#FFFFFF] text-base mt-2 opacity-75 leading-relaxed">
                {description}
            </p>
            <div class="flex flex-wrap gap-3 mt-4">
                {liveLink !== "#" && (
                    <a href={liveLink} class="project-link group">
                        <span>View Deploy</span>
                        <svg xmlns="http://www.w3.org/2000/svg" class="ml-1.5 w-4 h-4 transition-transform group-hover:translate-x-0.5" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                            <path d="M10 14a3.5 3.5 0 0 0 5 0l4 -4a3.5 3.5 0 0 0 -5 -5l-.5 .5" />
                            <path d="M14 10a3.5 3.5 0 0 0 -5 0l-4 4a3.5 3.5 0 0 0 5 5l.5 -.5" />
                        </svg>
                    </a>
                )}
                {isDataScienceProject && notebookLink !== "#" ? (
                    <a href={notebookLink} class="project-link group">
                        <span>View Notebook</span>
                        <svg xmlns="http://www.w3.org/2000/svg" class="ml-1.5 w-4 h-4 transition-transform group-hover:translate-y-0.5" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                            <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                            <path d="M3 19a2 2 0 0 0 2 2h14a2 2 0 0 0 2 -2v-14a2 2 0 0 0 -2 -2h-14a2 2 0 0 0 -2 2v14z" />
                            <path d="M7 10h4" />
                            <path d="M7 14h4" />
                            <path d="M14 10h.01" />
                            <path d="M14 14h.01" />
                        </svg>
                    </a>
                ) : (
                    sourceLink !== "#" && (
                        <a href={sourceLink} class="project-link group">
                            <span>Source Code</span>
                            <svg xmlns="http://www.w3.org/2000/svg" class="ml-1.5 w-4 h-4 transition-transform group-hover:translate-y-0.5" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                <path d="M9 19c-4.3 1.4 -4.3 -2.5 -6 -3m12 5v-3.5c0 -1 .1 -1.4 -.5 -2c2.8 -.3 5.5 -1.4 5.5 -6a4.6 4.6 0 0 0 -1.3 -3.2a4.2 4.2 0 0 0 -.1 -3.2s-1.1 -.3 -3.5 1.3a12.3 12.3 0 0 0 -6.2 0c-2.4 -1.6 -3.5 -1.3 -3.5 -1.3a4.2 4.2 0 0 0 -.1 3.2a4.6 4.6 0 0 0 -1.3 3.2c0 4.6 2.7 5.7 5.5 6c-.6 .6 -.6 1.2 -.5 2v3.5" />
                            </svg>
                        </a>
                    )
                )}
            </div>
            <slot name="extra"></slot>
        </div>
    </div>
</BaseCard>

<style>
    .project-card {
        transition: all 0.4s cubic-bezier(0.215, 0.61, 0.355, 1);
        border: 1px solid rgba(82, 82, 91, 0.15);
    }
    
    .hover-scale:hover {
        transform: translateY(-4px);
    }
    
    .project-image-container {
        position: relative;
        transition: all 0.3s ease;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    }
    
    .project-image-container:hover {
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.25);
    }
    
    .project-link {
        display: inline-flex;
        align-items: center;
        padding: 0.5rem 1rem;
        color: #e4e4e7;
        font-weight: 500;
        background-color: rgba(39, 39, 42, 0.6);
        text-decoration: none;
        border-radius: 8px;
        transition: all 0.2s ease;
        border: 1px solid rgba(113, 113, 122, 0.3);
        backdrop-filter: blur(8px);
    }

    .project-link:hover {
        background-color: rgba(63, 63, 70, 0.4);
        border-color: rgba(161, 161, 170, 0.4);
        color: #ffffff;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
    
    h3 {
        position: relative;
        display: inline-block;
    }
    
    h3::after {
        content: '';
        position: absolute;
        bottom: -6px;
        left: 0;
        width: 40px;
        height: 3px;
        background: linear-gradient(90deg, rgba(113, 113, 122, 0.8), rgba(113, 113, 122, 0.2));
        border-radius: 3px;
    }
</style>
</file>

<file path="components/ui/Gradient/color-updater.js">
/**
 * This script bridges between our gradient-controller.js and the Gradient class.
 * It adds an updateColors method to the Gradient class that allows us to change the colors dynamically.
 */
⋮----
// External function to update gradient colors that can be called from the gradient-controller.js
function addUpdateColorsToGradient(gradientInstance) {
⋮----
console.error("No gradient instance provided");
⋮----
// Add an updateColors method to the gradient instance
⋮----
if (!colors || !Array.isArray(colors) || colors.length < 4) {
console.error("Invalid colors array provided to updateColors");
⋮----
// Convert the hex/rgb colors to normalized RGB arrays for the shader
const normalizedColors = colors.map(color => {
// If it's already a normalized array, return it
if (Array.isArray(color)) {
// Make sure values are between 0 and 1
return color.map(c => typeof c === 'number' ? Math.min(1, Math.max(0, c)) : 0);
⋮----
// If it's an RGB string like "rgb(r,g,b)"
if (typeof color === 'string' && color.startsWith('rgb')) {
const match = color.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*([\d.]+))?\)/);
⋮----
parseInt(match[1], 10) / 255,
parseInt(match[2], 10) / 255,
parseInt(match[3], 10) / 255
⋮----
// Ensure it's a hex string
⋮----
// Remove # if present
color = color.replace(/^#/, '');
⋮----
// Expand shorthand hex (e.g., #FFF to #FFFFFF)
⋮----
// Check if it's a valid hex color
if (!/^[0-9A-Fa-f]{6}$/.test(color)) {
console.error("Invalid hex color:", color);
return [0, 0, 0]; // Default to black
⋮----
// Parse hex to RGB components normalized to 0-1
const r = parseInt(color.substring(0, 2), 16) / 255;
const g = parseInt(color.substring(2, 4), 16) / 255;
const b = parseInt(color.substring(4, 6), 16) / 255;
⋮----
console.error("Invalid color format:", color);
return [0, 0, 0]; // Default black if invalid
⋮----
// Update section colors used for waves
⋮----
// Update the base color (first color)
⋮----
// Update wave layer colors (remaining colors)
⋮----
for (let i = 1; i < Math.min(normalizedColors.length, this.uniforms.u_waveLayers.value.length + 1); i++) {
⋮----
// Update canvas CSS variables for future reference
const canvas = document.getElementById('gradient-canvas');
⋮----
colors.forEach((color, index) => {
⋮----
// If it's a hex string, use it directly
⋮----
// Ensure it has a # prefix if it's a hex color
cssColor = color.startsWith('#') ? color : (
color.startsWith('rgb') ? color : `#${color}`
⋮----
// If it's an RGB array, convert to hex for CSS
else if (Array.isArray(color)) {
// For normalized 0-1 values
if (color.every(c => typeof c === 'number' && c <= 1)) {
⋮----
Math.round(color[0] * 255).toString(16).padStart(2, '0') +
Math.round(color[1] * 255).toString(16).padStart(2, '0') +
Math.round(color[2] * 255).toString(16).padStart(2, '0');
⋮----
// For 0-255 values
⋮----
Math.round(color[0]).toString(16).padStart(2, '0') +
Math.round(color[1]).toString(16).padStart(2, '0') +
Math.round(color[2]).toString(16).padStart(2, '0');
⋮----
canvas.style.setProperty(`--gradient-color-${index + 1}`, cssColor);
⋮----
// Mark the canvas as needing a redraw
⋮----
this.minigl.render();
⋮----
console.error("Error updating gradient colors:", error);
</file>

<file path="components/ui/Gradient/gradient.js">
/*
*   Stripe WebGl Gradient Animation
*   All Credits to Stripe.com
*   ScrollObserver functionality to disable animation when not scrolled into view has been disabled and 
*   commented out for now.
*   https://kevinhufnagl.com
*/
⋮----
//Converting colors to proper format
function normalizeColor(hexCode) {
// Ensure hexCode is treated as a number if it's a string like "0xffffff"
if (typeof hexCode === 'string' && hexCode.startsWith('0x')) {
hexCode = parseInt(hexCode);
} else if (typeof hexCode === 'string' && hexCode.startsWith('#')) {
// Convert #ffffff format to 0xffffff number
hexCode = parseInt(hexCode.substring(1), 16);
⋮----
console.error('Invalid color format for normalizeColor:', hexCode);
// Return a default color like black to avoid errors
⋮----
//Essential functionality of WebGl
//t = width
//n = height
class MiniGl {
⋮----
debug_output = -1 !== document.location.search.toLowerCase().indexOf("debug=webgl");
_miniGl.canvas = canvas, _miniGl.gl = _miniGl.canvas.getContext("webgl", {
⋮----
width && height && this.setSize(width, height), _miniGl.lastDebugMsg, _miniGl.debug = debug && debug_output ? function(e) {
const t = new Date;
t - _miniGl.lastDebugMsg > 1e3 && console.log("---"), console.log(t.toLocaleTimeString() + Array(Math.max(0, 32 - e.length)).join(" ") + e + ": ", ...Array.from(arguments).slice(1)), _miniGl.lastDebugMsg = t
} : () => {}, Object.defineProperties(_miniGl, {
⋮----
function getShaderByType(type, source) {
const shader = context.createShader(type);
return context.shaderSource(shader, source), context.compileShader(shader), context.getShaderParameter(shader, context.COMPILE_STATUS) || console.error(context.getShaderInfoLog(shader)), _miniGl.debug("Material.compileShaderSource", {
⋮----
function getUniformVariableDeclarations(uniforms, type) {
return Object.entries(uniforms).map(([uniform, value]) => value.getDeclaration(uniform, type)).join("\n")
⋮----
material.vertexSource = `\n              ${prefix}\n              attribute vec4 position;\n              attribute vec2 uv;\n              attribute vec2 uvNorm;\n              ${getUniformVariableDeclarations(_miniGl.commonUniforms,"vertex")}\n              ${getUniformVariableDeclarations(uniforms,"vertex")}\n              ${vertexShaders}\n            `,
material.Source = `\n              ${prefix}\n              ${getUniformVariableDeclarations(_miniGl.commonUniforms,"fragment")}\n              ${getUniformVariableDeclarations(uniforms,"fragment")}\n              ${fragments}\n            `,
material.vertexShader = getShaderByType(context.VERTEX_SHADER, material.vertexSource),
material.fragmentShader = getShaderByType(context.FRAGMENT_SHADER, material.Source),
material.program = context.createProgram(),
context.attachShader(material.program, material.vertexShader),
context.attachShader(material.program, material.fragmentShader),
context.linkProgram(material.program),
context.getProgramParameter(material.program, context.LINK_STATUS) || console.error(context.getProgramInfoLog(material.program)),
context.useProgram(material.program),
material.attachUniforms(void 0, _miniGl.commonUniforms),
material.attachUniforms(void 0, material.uniforms)
⋮----
//t = uniform
attachUniforms(name, uniforms) {
//n  = material
⋮----
void 0 === name ? Object.entries(uniforms).forEach(([name, uniform]) => {
material.attachUniforms(name, uniform)
}) : "array" == uniforms.type ? uniforms.value.forEach((uniform, i) => material.attachUniforms(`${name}[${i}]`, uniform)) : "struct" == uniforms.type ? Object.entries(uniforms.value).forEach(([uniform, i]) => material.attachUniforms(`${name}.${uniform}`, i)) : (_miniGl.debug("Material.attachUniforms", {
⋮----
}), material.uniformInstances.push({
⋮----
location: context.getUniformLocation(material.program, name)
⋮----
this.type = "float", Object.assign(this, e);
⋮----
} [this.type] || "1f", this.update()
⋮----
update(value) {
void 0 !== this.value && context[`uniform${this.typeFn}`](value, 0 === this.typeFn.indexOf("Matrix") ? this.transpose : this.value, 0 === this.typeFn.indexOf("Matrix") ? this.value : null)
⋮----
//e - name
//t - type
//n - length
getDeclaration(name, type, length) {
⋮----
if ("array" === uniform.type) return uniform.value[0].getDeclaration(name, type, uniform.value.length) + `\nconst int ${name}_length = ${uniform.value.length};`;
⋮----
let name_no_prefix = name.replace("u_", "");
⋮----
name_no_prefix.charAt(0).toUpperCase() +
name_no_prefix.slice(1),
⋮----
Object.entries(uniform.value).map(([name, uniform]) =>
uniform.getDeclaration(name, type)
.replace(/^uniform/, ""))
.join("")
⋮----
context.createBuffer(), this.attributes = {
position: new _miniGl.Attribute({
⋮----
uv: new _miniGl.Attribute({
⋮----
uvNorm: new _miniGl.Attribute({
⋮----
index: new _miniGl.Attribute({
⋮----
}, this.setTopology(n, i), this.setSize(width, height, orientation)
⋮----
setTopology(e = 1, t = 1) {
⋮----
n.xSegCount = e, n.ySegCount = t, n.vertexCount = (n.xSegCount + 1) * (n.ySegCount + 1), n.quadCount = n.xSegCount * n.ySegCount * 2, n.attributes.uv.values = new Float32Array(2 * n.vertexCount), n.attributes.uvNorm.values = new Float32Array(2 * n.vertexCount), n.attributes.index.values = new Uint16Array(3 * n.quadCount);
⋮----
n.attributes.uv.update(), n.attributes.uvNorm.update(), n.attributes.index.update(), _miniGl.debug("Geometry.setTopology", {
⋮----
setSize(width = 1, height = 1, orientation = "xz") {
⋮----
|| (geometry.attributes.position.values = new Float32Array(3 * geometry.vertexCount));
⋮----
geometry.attributes.position.values[3 * l + "xyz".indexOf(orientation[0])] = r,
geometry.attributes.position.values[3 * l + "xyz".indexOf(orientation[1])] = -t
⋮----
geometry.attributes.position.update(), _miniGl.debug("Geometry.setSize", {
⋮----
mesh.geometry = geometry, mesh.material = material, mesh.wireframe = !1, mesh.attributeInstances = [], Object.entries(mesh.geometry.attributes).forEach(([e, attribute]) => {
mesh.attributeInstances.push({
⋮----
location: attribute.attach(e, mesh.material.program)
⋮----
}), _miniGl.meshes.push(mesh), _miniGl.debug("Mesh.constructor", {
⋮----
draw() {
context.useProgram(this.material.program), this.material.uniformInstances.forEach(({
⋮----
}) => e.update(t)), this.attributeInstances.forEach(({
⋮----
}) => e.use(t)), context.drawElements(this.wireframe ? context.LINES : context.TRIANGLES, this.geometry.attributes.index.values.length, context.UNSIGNED_SHORT, 0)
⋮----
remove() {
_miniGl.meshes = _miniGl.meshes.filter(e => e != this)
⋮----
this.type = context.FLOAT, this.normalized = !1, this.buffer = context.createBuffer(), Object.assign(this, e), this.update()
⋮----
update() {
void 0 !== this.values && (context.bindBuffer(this.target, this.buffer), context.bufferData(this.target, this.values, context.STATIC_DRAW))
⋮----
attach(e, t) {
const n = context.getAttribLocation(t, e);
return this.target === context.ARRAY_BUFFER && (context.enableVertexAttribArray(n), context.vertexAttribPointer(n, this.size, this.type, this.normalized, 0, 0)), n
⋮----
use(e) {
context.bindBuffer(this.target, this.buffer), this.target === context.ARRAY_BUFFER && (context.enableVertexAttribArray(e), context.vertexAttribPointer(e, this.size, this.type, this.normalized, 0, 0))
⋮----
projectionMatrix: new _miniGl.Uniform({
⋮----
modelViewMatrix: new _miniGl.Uniform({
⋮----
resolution: new _miniGl.Uniform({
⋮----
aspectRatio: new _miniGl.Uniform({
⋮----
setSize(e = 640, t = 480) {
this.width = e, this.height = t, this.canvas.width = e, this.canvas.height = t, this.gl.viewport(0, 0, e, t), this.commonUniforms.resolution.value = [e, t], this.commonUniforms.aspectRatio.value = e / t, this.debug("MiniGL.setSize", {
⋮----
//left, right, top, bottom, near, far
setOrthographicCamera(e = 0, t = 0, n = 0, i = -2e3, s = 2e3) {
this.commonUniforms.projectionMatrix.value = [2 / this.width, 0, 0, 0, 0, 2 / this.height, 0, 0, 0, 0, 2 / (i - s), 0, e, t, n, 1], this.debug("setOrthographicCamera", this.commonUniforms.projectionMatrix.value)
⋮----
render() {
this.gl.clearColor(0, 0, 0, 0), this.gl.clearDepth(1), this.meshes.forEach(e => e.draw())
⋮----
//Sets initial properties
function e(object, propertyName, val) {
return propertyName in object ? Object.defineProperty(object, propertyName, {
⋮----
//Gradient object
class Gradient {
⋮----
e(this, "el", void 0), e(this, "cssVarRetries", 0), e(this, "maxCssVarRetries", 200), e(this, "angle", 0), e(this, "isLoadedClass", !1), e(this, "isScrolling", !1), /*e(this, "isStatic", o.disableAmbientAnimations()),*/ e(this, "scrollingTimeout", void 0), e(this, "scrollingRefreshDelay", 200), e(this, "isIntersecting", !1), e(this, "shaderFiles", void 0), e(this, "vertexShader", void 0), e(this, "sectionColors", void 0), e(this, "computedCanvasStyle", void 0), e(this, "conf", void 0), e(this, "uniforms", void 0), e(this, "t", 1253106), e(this, "last", 0), e(this, "width", void 0), e(this, "minWidth", 1111), e(this, "height", 600), e(this, "xSegCount", void 0), e(this, "ySegCount", void 0), e(this, "mesh", void 0), e(this, "material", void 0), e(this, "geometry", void 0), e(this, "minigl", void 0), e(this, "scrollObserver", void 0), e(this, "amp", 320), e(this, "seed", 5), e(this, "freqX", 14e-5), e(this, "freqY", 29e-5), e(this, "freqDelta", 1e-5), e(this, "activeColors", [1, 1, 1, 1]), e(this, "isMetaKey", !1), e(this, "isGradientLegendVisible", !1), e(this, "isMouseDown", !1), e(this, "handleScroll", () => {
clearTimeout(this.scrollingTimeout), this.scrollingTimeout = setTimeout(this.handleScrollEnd, this.scrollingRefreshDelay), this.isGradientLegendVisible && this.hideGradientLegend(), this.conf.playing && (this.isScrolling = !0, this.pause())
}), e(this, "handleScrollEnd", () => {
this.isScrolling = !1, this.isIntersecting && this.play()
}), e(this, "resize", () => {
this.width = window.innerWidth, this.minigl.setSize(this.width, this.height), this.minigl.setOrthographicCamera(), this.xSegCount = Math.ceil(this.width * this.conf.density[0]), this.ySegCount = Math.ceil(this.height * this.conf.density[1]), this.mesh.geometry.setTopology(this.xSegCount, this.ySegCount), this.mesh.geometry.setSize(this.width, this.height), this.mesh.material.uniforms.u_shadow_power.value = this.width < 600 ? 5 : 6
}), e(this, "handleMouseDown", e => {
this.isGradientLegendVisible && (this.isMetaKey = e.metaKey, this.isMouseDown = !0, !1 === this.conf.playing && requestAnimationFrame(this.animate))
}), e(this, "handleMouseUp", () => {
⋮----
}), e(this, "animate", e => {
if (!this.shouldSkipFrame(e) || this.isMouseDown) {
if (this.t += Math.min(e - this.last, 1e3 / 15), this.last = e, this.isMouseDown) {
⋮----
this.mesh.material.uniforms.u_time.value = this.t, this.minigl.render()
⋮----
if (0 !== this.last && this.isStatic) return this.minigl.render(), void this.disconnect();
(/*this.isIntersecting && */this.conf.playing || this.isMouseDown) && requestAnimationFrame(this.animate)
}), e(this, "addIsLoadedClass", () => {
/*this.isIntersecting && */!this.isLoadedClass && (this.isLoadedClass = !0, this.el.classList.add("isLoaded"), setTimeout(() => {
this.el.parentElement.classList.add("isLoaded")
⋮----
}), e(this, "pause", () => {
⋮----
}), e(this, "play", () => {
requestAnimationFrame(this.animate), this.conf.playing = true
}), e(this,"initGradient", (selector) => {
this.el = document.querySelector(selector);
this.connect();
⋮----
async connect() {
⋮----
document.querySelectorAll("canvas").length < 1 ? console.log("DID NOT LOAD HERO STRIPE CANVAS") : (
⋮----
this.minigl = new MiniGl(this.el, null, null, !0),
requestAnimationFrame(() => {
this.el && (this.computedCanvasStyle = getComputedStyle(this.el), this.waitForCssVars())
⋮----
/*
          this.scrollObserver = await s.create(.1, !1),
          this.scrollObserver.observe(this.el),
          this.scrollObserver.onSeparate(() => {
              window.removeEventListener("scroll", this.handleScroll), window.removeEventListener("mousedown", this.handleMouseDown), window.removeEventListener("mouseup", this.handleMouseUp), window.removeEventListener("keydown", this.handleKeyDown), this.isIntersecting = !1, this.conf.playing && this.pause()
          }), 
          this.scrollObserver.onIntersect(() => {
              window.addEventListener("scroll", this.handleScroll), window.addEventListener("mousedown", this.handleMouseDown), window.addEventListener("mouseup", this.handleMouseUp), window.addEventListener("keydown", this.handleKeyDown), this.isIntersecting = !0, this.addIsLoadedClass(), this.play()
          })*/
⋮----
disconnect() {
this.scrollObserver && (window.removeEventListener("scroll", this.handleScroll), window.removeEventListener("mousedown", this.handleMouseDown), window.removeEventListener("mouseup", this.handleMouseUp), window.removeEventListener("keydown", this.handleKeyDown), this.scrollObserver.disconnect()), window.removeEventListener("resize", this.resize)
⋮----
initMaterial() {
⋮----
u_time: new this.minigl.Uniform({
⋮----
u_shadow_power: new this.minigl.Uniform({
⋮----
u_darken_top: new this.minigl.Uniform({
⋮----
u_active_colors: new this.minigl.Uniform({
⋮----
u_global: new this.minigl.Uniform({
⋮----
noiseFreq: new this.minigl.Uniform({
⋮----
noiseSpeed: new this.minigl.Uniform({
⋮----
u_vertDeform: new this.minigl.Uniform({
⋮----
incline: new this.minigl.Uniform({
value: Math.sin(this.angle) / Math.cos(this.angle)
⋮----
offsetTop: new this.minigl.Uniform({
⋮----
offsetBottom: new this.minigl.Uniform({
⋮----
noiseAmp: new this.minigl.Uniform({
⋮----
noiseFlow: new this.minigl.Uniform({
⋮----
noiseSeed: new this.minigl.Uniform({
⋮----
u_baseColor: new this.minigl.Uniform({
⋮----
u_waveLayers: new this.minigl.Uniform({
⋮----
for (let e = 1; e < this.sectionColors.length; e += 1) this.uniforms.u_waveLayers.value.push(new this.minigl.Uniform({
⋮----
color: new this.minigl.Uniform({
⋮----
noiseFloor: new this.minigl.Uniform({
⋮----
noiseCeil: new this.minigl.Uniform({
⋮----
return this.vertexShader = [this.shaderFiles.noise, this.shaderFiles.blend, this.shaderFiles.vertex].join("\n\n"), new this.minigl.Material(this.vertexShader, this.shaderFiles.fragment, this.uniforms)
⋮----
initMesh() {
this.material = this.initMaterial(), this.geometry = new this.minigl.PlaneGeometry, this.mesh = new this.minigl.Mesh(this.geometry, this.material)
⋮----
shouldSkipFrame(e) {
return !!window.document.hidden || (!this.conf.playing || (parseInt(e, 10) % 2 == 0 || void 0))
⋮----
updateFrequency(e) {
⋮----
toggleColor(index) {
⋮----
showGradientLegend() {
this.width > this.minWidth && (this.isGradientLegendVisible = !0, document.body.classList.add("isGradientLegendVisible"))
⋮----
hideGradientLegend() {
this.isGradientLegendVisible = !1, document.body.classList.remove("isGradientLegendVisible")
⋮----
init() {
this.initGradientColors(), this.initMesh(), this.resize(), requestAnimationFrame(this.animate), window.addEventListener("resize", this.resize)
⋮----
/*
    * Waiting for the css variables to become available, usually on page load before we can continue.
    * Using default colors assigned below if no variables have been found after maxCssVarRetries
    */
waitForCssVars() {
if (this.computedCanvasStyle && -1 !== this.computedCanvasStyle.getPropertyValue("--gradient-color-1").indexOf("#")) this.init(), this.addIsLoadedClass();
⋮----
return this.sectionColors = [16711680, 16711680, 16711935, 65280, 255],void this.init();
⋮----
requestAnimationFrame(() => this.waitForCssVars())
⋮----
/*
    * Initializes the four section colors by retrieving them from css variables.
    */
initGradientColors() {
const initialColors = ["--gradient-color-1", "--gradient-color-2", "--gradient-color-3", "--gradient-color-4"].map(cssPropertyName => {
let hex = this.computedCanvasStyle.getPropertyValue(cssPropertyName).trim();
⋮----
console.warn(`CSS variable ${cssPropertyName} not found. Using default.`);
// Provide a fallback default, e.g., black or grey
⋮----
const hexTemp = hex.substr(1).split("").map(hexTemp => hexTemp + hexTemp).join("");
⋮----
// Return the hex string directly, normalization happens in updateColors
⋮----
// Use updateColors to set the initial colors
// Make sure normalizeColor is available here or colors are pre-normalized
// For simplicity, let updateColors handle normalization
// this.updateColors(initialColors); // This won't work yet as uniforms aren't ready
// Instead, store normalized colors for initMaterial
this.sectionColors = initialColors.map(normalizeColor); // Normalize for initMaterial
⋮----
/*
  *Finally initializing the Gradient class, assigning a canvas to it and calling Gradient.connect() which initializes everything,
  * Use Gradient.pause() and Gradient.play() for controls.
  *
  * Here are some default property values you can change anytime:
  * Amplitude:    Gradient.amp = 0
  * Colors:       Gradient.sectionColors (if you change colors, use normalizeColor(#hexValue)) before you assign it.
  *
  *
  * Useful functions
  * Gradient.toggleColor(index)
  * Gradient.updateFrequency(freq)
  */
</file>

<file path="components/ui/Gradient/GradientButton.astro">
<div class="gradient-controls mt-4">
  <h3 class="text-[#FFFFFF] text-lg mb-3 opacity-70">Background Theme</h3>
  <div class="social-links flex gap-3">
    <button id="cycle-button" class="social-link" aria-label="Cycle gradient colors">
      <span class="icon">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-paint-bucket">
          <path d="m19 11-8-8-8.6 8.6a2 2 0 0 0 0 2.8l5.2 5.2c.8.8 2 .8 2.8 0L19 11Z"/>
          <path d="m5 2 6 6"/>
          <path d="M13.5 15.5 22 7l-1.5-1.5L13.5 13Z"/>
        </svg>
      </span>
      <span class="tooltip">Cycle Colors</span>
    </button>

    <button id="random-button" class="social-link" aria-label="Random gradient colors">
      <span class="icon">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-shuffle">
          <path d="M2 18h1.4c1.3 0 2.5-.6 3.4-1.6l1.8-1.8c.9-1 2.1-1.6 3.4-1.6H22"/>
          <path d="m18 2 4 4-4 4"/>
          <path d="M2 6h1.9c1.5 0 2.9.9 3.6 2.2l1.1 2.3c.7 1.3 2.1 2.2 3.6 2.2H22"/>
          <path d="m18 22 4-4-4-4"/>
        </svg>
      </span>
      <span class="tooltip">Random Colors</span>
    </button>
  </div>
</div>

<script>
  // Define types for better TypeScript support
  type ButtonElement = HTMLButtonElement;
  type ActionFunction = () => void;

  // Spinner SVG for loading state
  const spinnerIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="animate-spin"><path d="M21 12a9 9 0 1 1-6.219-8.56"></path></svg>`;

  // Original SVGs (Using updated icons)
  const cycleIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-paint-bucket"><path d="m19 11-8-8-8.6 8.6a2 2 0 0 0 0 2.8l5.2 5.2c.8.8 2 .8 2.8 0L19 11Z"/><path d="m5 2 6 6"/><path d="M13.5 15.5 22 7l-1.5-1.5L13.5 13Z"/></svg>`;

  const randomIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-shuffle"><path d="M2 18h1.4c1.3 0 2.5-.6 3.4-1.6l1.8-1.8c.9-1 2.1-1.6 3.4-1.6H22"/><path d="m18 2 4 4-4 4"/><path d="M2 6h1.9c1.5 0 2.9.9 3.6 2.2l1.1 2.3c.7 1.3 2.1 2.2 3.6 2.2H22"/><path d="m18 22 4-4-4-4"/></svg>`;

  // Function to show loading state on a button
  function setButtonLoading(button: ButtonElement, isLoading: boolean): void {
    const iconEl = button.querySelector('.icon');

    if (isLoading) {
      button.classList.add('loading');
      button.disabled = true;

      // Replace icon with spinner
      if (iconEl) {
        iconEl.innerHTML = spinnerIcon;
      }
    } else {
      button.classList.remove('loading');
      button.disabled = false;

      // Restore original icon
      if (iconEl) {
        const isCycleButton = button.id === 'cycle-button';
        // Ensure the correct icon is restored based on button ID
        iconEl.innerHTML = isCycleButton ? cycleIcon : randomIcon;
      }
    }
  }

  // Handle button clicks with debouncing/loading state
  function handleButtonClick(button: ButtonElement, actionFn: ActionFunction): void {
    // Check if already loading to prevent multiple clicks
    if (button.classList.contains('loading')) return;

    // Set loading state
    setButtonLoading(button, true);

    // Call the action function
    try {
      actionFn();
    } catch (error) {
      console.error("Error during button action:", error);
      // Optionally reset button state immediately on error
      setButtonLoading(button, false);
      return; // Stop further execution in case of error
    }

    // Reset after a timeout (e.g., 1 second)
    // Adjust timeout as needed, potentially based on gradient transition duration
    setTimeout(() => {
      setButtonLoading(button, false);
    }, 1000);
  }

  // Function to set up event listeners for the buttons
  function setupButtonListeners(): void {
    console.log("Setting up gradient button listeners");

    const cycleButton = document.getElementById('cycle-button') as HTMLButtonElement | null;
    const randomButton = document.getElementById('random-button') as HTMLButtonElement | null;

    // --- Event Listener Logic ---
    // Remove previous listeners to prevent duplicates on HMR or Astro page transitions
    if (cycleButton && cycleButton.parentNode) {
      const newCycleButton = cycleButton.cloneNode(true) as HTMLButtonElement;
      cycleButton.parentNode.replaceChild(newCycleButton, cycleButton);

      newCycleButton.addEventListener('click', () => {
        console.log("Cycle button clicked");
        handleButtonClick(newCycleButton, () => {
          // Check for different possible global function names/objects
          if (window.gradientManager && typeof window.gradientManager.nextGradient === 'function') {
            window.gradientManager.nextGradient();
          } else if (typeof window.cycleGradientSet === 'function') {
            window.cycleGradientSet();
          } else {
            console.error("No gradient cycling function found on window.gradientManager or window.cycleGradientSet");
          }
        });
      });
    } else {
      console.error("Cycle button not found");
    }

    if (randomButton && randomButton.parentNode) {
      const newRandomButton = randomButton.cloneNode(true) as HTMLButtonElement;
      randomButton.parentNode.replaceChild(newRandomButton, randomButton);

      newRandomButton.addEventListener('click', () => {
        console.log("Random button clicked");
        handleButtonClick(newRandomButton, () => {
          // Check for different possible global function names/objects
          if (window.gradientManager && typeof window.gradientManager.randomGradient === 'function') {
            window.gradientManager.randomGradient();
          } else if (typeof window.randomizeGradient === 'function') {
            window.randomizeGradient();
          } else {
            console.error("No gradient randomize function found on window.gradientManager or window.randomizeGradient");
          }
        });
      });
    } else {
      console.error("Random button not found");
    }
  }

  // --- Initialization Logic ---
  // Use a flag to ensure setup runs only once per full page load/transition sequence
  let listenersInitialized = false;

  function initializeIfNeeded(): void {
    if (!listenersInitialized) {
      setupButtonListeners();
      listenersInitialized = true;
    }
  }

  // Try setting up listeners on initial load
  if (document.readyState === 'loading') {
    // Loading hasn't finished yet
    document.addEventListener('DOMContentLoaded', initializeIfNeeded);
  } else {
    // `DOMContentLoaded` has already fired or state is 'interactive'/'complete'
    initializeIfNeeded();
  }

  // Re-attach listeners after Astro view transitions
  // Reset the flag on page load to allow re-initialization
  document.addEventListener('astro:page-load', () => {
    console.log("Astro page load detected, re-initializing listeners.");
    listenersInitialized = false; // Reset flag
    initializeIfNeeded(); // Re-run setup
  });

  // Add TypeScript interface for window global objects
  interface Window {
    gradientManager?: {
      nextGradient?: () => void;
      randomGradient?: () => void;
    };
    cycleGradientSet?: () => void;
    randomizeGradient?: () => void;
  }
</script>

<style>
  .social-link {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 44px; /* Fixed width */
    height: 44px; /* Fixed height */
    color: #e4e4e7; /* Icon color */
    background-color: rgba(0, 0, 0, 0.3); /* Darker semi-transparent background */
    border-radius: 12px; /* Rounded corners */
    border: 1px solid rgba(113, 113, 122, 0.2); /* Subtle border */
    backdrop-filter: blur(10px); /* Background blur effect */
    transition: all 0.25s cubic-bezier(0.4, 0, 0.2, 1); /* Smooth transition */
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06); /* Subtle shadow */
    overflow: hidden; /* Hide overflow */
    cursor: pointer; /* Pointer cursor */
  }

  .social-link:disabled {
    opacity: 0.6; /* Dim disabled button */
    cursor: not-allowed; /* Not-allowed cursor */
  }

  /* Hover effect - lift and glow */
  .social-link:hover:not(:disabled) {
    transform: translateY(-4px); /* Lift effect */
    background-color: rgba(39, 39, 42, 0.5); /* Slightly darker on hover */
    border-color: rgba(161, 161, 170, 0.4); /* Brighter border on hover */
    color: #ffffff; /* White icon on hover */
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.2), 0 4px 6px -2px rgba(0, 0, 0, 0.1); /* Larger shadow */
  }

  /* Active (click) effect */
  .social-link:active:not(:disabled) {
    transform: translateY(-2px); /* Slight press down effect */
  }

  .icon {
    display: flex; /* Use flex to center icon if needed */
    align-items: center;
    justify-content: center;
    opacity: 0.9; /* Slight transparency */
    z-index: 1; /* Ensure icon is above pseudo-elements */
    filter: drop-shadow(0 1px 1px rgba(0, 0, 0, 0.1)); /* Subtle icon shadow */
    transition: transform 0.2s ease; /* Smooth icon scaling */
  }

  .social-link:hover:not(:disabled) .icon {
    transform: scale(1.1); /* Scale up icon on hover */
  }

  /* Animated glow effect using pseudo-element */
  .social-link::before {
    content: '';
    position: absolute;
    inset: -1px; /* Cover the border area */
    z-index: 0; /* Behind the icon */
    background: linear-gradient(
      135deg,
      rgba(255, 255, 255, 0.1), /* Subtle white highlight */
      rgba(255, 255, 255, 0.05),
      transparent,
      transparent
    );
    border-radius: 12px; /* Match parent border-radius */
    /* Mask to create an inner glow effect */
    mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
            mask-composite: exclude; /* Standard syntax */
    opacity: 0; /* Hidden by default */
    transition: opacity 0.3s ease; /* Fade in/out */
  }

  .social-link:hover:not(:disabled)::before {
    opacity: 1; /* Show glow on hover */
  }

  /* Animation for the spinning loader */
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .animate-spin {
    animation: spin 1s linear infinite; /* Apply the spin animation */
  }

  /* Tooltip styling */
  .tooltip {
    position: absolute;
    bottom: -30px; /* Position below the button */
    left: 50%; /* Center horizontally */
    transform: translateX(-50%) translateY(8px); /* Center and position slightly down */
    padding: 0.25rem 0.75rem; /* Padding */
    border-radius: 6px; /* Rounded corners */
    background-color: rgba(0, 0, 0, 0.75); /* Dark background */
    color: white; /* White text */
    font-size: 0.75rem; /* Small font size */
    white-space: nowrap; /* Prevent wrapping */
    pointer-events: none; /* Don't interfere with clicks */
    opacity: 0; /* Hidden by default */
    transition: opacity 0.2s ease, transform 0.2s ease; /* Smooth fade and slide */
    z-index: 10; /* Ensure tooltip is above other elements */
  }

  /* Show tooltip on hover */
  .social-link:hover:not(:disabled) .tooltip {
    opacity: 1; /* Fade in */
    transform: translateX(-50%) translateY(0); /* Slide up */
  }
</style>
</file>

<file path="components/ui/Gradient/GradientCanvas.astro">
---
import { ClientRouter } from 'astro:transitions';
---

<div class="gradient-container" transition:persist>
  <ClientRouter />
  <canvas id="gradient-canvas"></canvas>
</div>

<style>
  .gradient-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1; /* Places it behind other content */
    overflow: hidden;
  }
  
  #gradient-canvas {
    width: 100%;
    height: 100%;
    --gradient-color-1: #111111;
    --gradient-color-2: #222222;
    --gradient-color-3: #333333;
    --gradient-color-4: #1a1a1a;
  }
</style>
  
<script>
  // Import Gradient and our color updater
  import { Gradient } from './gradient.js';
  import { addUpdateColorsToGradient } from './color-updater.js';
  
  // Define a proper type interface for your Gradient class
  interface GradientType {
    initGradient: (selector: string) => void;
    resize: () => void;
    updateColors?: (colors: any[]) => boolean;
  }

  // Collection of gradient color sets - curated premium palettes
  const gradientSets = [
    // Subtle Dark (Default)
    {
      color1: "#111111",
      color2: "#222222",
      color3: "#333333",
      color4: "#1a1a1a"
    },
    // Elegant Slate (Monochromatic)
    {
      color1: "#0f172a",
      color2: "#1e293b",
      color3: "#334155",
      color4: "#475569"
    },
    // Onyx (Monochromatic)
    {
      color1: "#18181b",
      color2: "#27272a",
      color3: "#3f3f46",
      color4: "#52525b"
    },
    // Midnight Indigo (Monochromatic)
    {
      color1: "#1e1b4b",
      color2: "#312e81",
      color3: "#3730a3",
      color4: "#4338ca"
    },
    // Ocean Depths (Monochromatic)
    {
      color1: "#042f2e",
      color2: "#134e4a",
      color3: "#115e59",
      color4: "#0f766e"
    },
    // Amethyst (Monochromatic)
    {
      color1: "#4a044e",
      color2: "#5b0060",
      color3: "#701a75",
      color4: "#86198f"
    },
    // Charcoal (Monochromatic)
    {
      color1: "#1c1917",
      color2: "#292524",
      color3: "#44403c",
      color4: "#57534e"
    },
    // Graphite (Monochromatic)
    {
      color1: "#09090b",
      color2: "#18181b",
      color3: "#27272a",
      color4: "#3f3f46"
    },
    // Cobalt (Monochromatic)
    {
      color1: "#0c4a6e",
      color2: "#075985",
      color3: "#0369a1",
      color4: "#0284c7"
    },
    // Emerald Mist (Monochromatic)
    {
      color1: "#064e3b",
      color2: "#065f46",
      color3: "#047857",
      color4: "#059669"
    },
    // Crimson Dusk (Monochromatic)
    {
      color1: "#7f1d1d",
      color2: "#991b1b",
      color3: "#b91c1c",
      color4: "#dc2626"
    },
    // Royal Velvet (Monochromatic)
    {
      color1: "#4c1d95",
      color2: "#5b21b6",
      color3: "#6d28d9",
      color4: "#7c3aed"
    },
    // Deep Forest (Monochromatic)
    {
      color1: "#052e16",
      color2: "#064e3b",
      color3: "#065f46",
      color4: "#047857"
    },
    // Twilight (Monochromatic)
    {
      color1: "#1e1b4b",
      color2: "#312e81",
      color3: "#3730a3",
      color4: "#4338ca"
    },
    // Space Gray (Monochromatic)
    {
      color1: "#030712",
      color2: "#111827",
      color3: "#1f2937",
      color4: "#374151"
    },
    // Steel Blue (Monochromatic)
    {
      color1: "#0e7490",
      color2: "#0891b2", 
      color3: "#06b6d4",
      color4: "#22d3ee"
    },
    // Cosmic Purple (Monochromatic)
    {
      color1: "#2e1065",
      color2: "#5b21b6",
      color3: "#6d28d9", 
      color4: "#7c3aed"
    },
    // Deep Bronze (Monochromatic)
    {
      color1: "#422006",
      color2: "#713f12",
      color3: "#854d0e",
      color4: "#a16207"
    },
    // Smoky (Monochromatic)
    {
      color1: "#0f0f0f",
      color2: "#121212",
      color3: "#171717",
      color4: "#262626"
    },
    // Dark Slate (Monochromatic)
    {
      color1: "#0f172a",
      color2: "#1e293b",
      color3: "#334155",
      color4: "#475569"
    },
    // Midnight Ocean - Bi-tonal
    {
      color1: "#0f172a",
      color2: "#1e293b",
      color3: "#334155",
      color4: "#1e40af"
    },
    // Deep Space - Bi-tonal
    {
      color1: "#020617",
      color2: "#0f172a",
      color3: "#1e1b4b",
      color4: "#312e81"
    },
    // Ethereal Violet - Bi-tonal
    {
      color1: "#2e1065",
      color2: "#5b21b6",
      color3: "#7e22ce",
      color4: "#c026d3"
    },
  ];

  // Ultra dark set for blog reading mode - extra dark for readability
  const blogReadingSet = {
    color1: "#080808",
    color2: "#0a0a0a", 
    color3: "#101010",
    color4: "#0c0c0c"
  };

  class GradientManager {
    gradient: GradientType | null;
    canvas: HTMLCanvasElement | null;
    currentSetIndex: number;
    previousSet: any;
    isTransitioning: boolean;
    transitionDuration: number;
    pendingOperation: Function | null;
    lastTransitionTime: number;

    constructor() {
      this.gradient = null;
      this.canvas = document.getElementById('gradient-canvas') as HTMLCanvasElement;
      this.currentSetIndex = 0;
      this.previousSet = null;
      this.isTransitioning = false;
      this.transitionDuration = 800; // 0.8 seconds for transition (reduced for faster response)
      this.pendingOperation = null;
      this.lastTransitionTime = 0;
      
      console.log("GradientManager initialized");
    }

    initialize() {
      // Check if gradient is already initialized
      if (!this.gradient && this.canvas) {
        console.log("Initializing gradient");
        
        // Create new Gradient instance
        this.gradient = new Gradient() as unknown as GradientType;
        this.gradient.initGradient('#gradient-canvas');
        
        // Add updateColors method to our gradient instance
        this.gradient = addUpdateColorsToGradient(this.gradient);
        
        // Make the Gradient instance available globally
        if (typeof window !== 'undefined') {
          window.myGradientInstance = this.gradient;
        }
        
        console.log("Gradient and color updater initialized");
      }
    }

    handlePageChange() {
      // Check if current page is a blog article
      const isBlogArticle = document.body.classList.contains('blog-article') || 
                          window.location.pathname.includes('/blog/');
      
      console.log("Handling page change, isBlogArticle:", isBlogArticle);
      
      if (isBlogArticle) {
        // Save current set before transitioning to blog mode
        if (!this.previousSet) {
          this.previousSet = this.getCurrentSet();
          console.log("Saved previous colors:", this.previousSet);
        }
        this.transitionTo(blogReadingSet);
      } else if (this.previousSet) {
        // Transition back to previous set when leaving blog
        console.log("Restoring previous colors");
        this.transitionTo(this.previousSet);
        this.previousSet = null;
      }
    }

    getCurrentSet() {
      if (!this.canvas) return null;
      
      return {
        color1: getComputedStyle(this.canvas).getPropertyValue('--gradient-color-1').trim(),
        color2: getComputedStyle(this.canvas).getPropertyValue('--gradient-color-2').trim(),
        color3: getComputedStyle(this.canvas).getPropertyValue('--gradient-color-3').trim(),
        color4: getComputedStyle(this.canvas).getPropertyValue('--gradient-color-4').trim()
      };
    }

    nextGradient() {
      console.log("nextGradient called");
      
      // Don't change if in blog mode
      if (this.previousSet) {
        console.log("Color change skipped: Currently in blog reading mode");
        return;
      }
      
      const action = () => {
        this.currentSetIndex = (this.currentSetIndex + 1) % gradientSets.length;
        console.log(`Cycling to set ${this.currentSetIndex}`);
        this.transitionTo(gradientSets[this.currentSetIndex]);
      };
      
      // If we're already transitioning, queue this action for later
      if (this.isTransitioning) {
        console.log("Transition in progress, queuing next gradient");
        this.pendingOperation = action;
        return;
      }
      
      // Otherwise, just do it now
      action();
    }

    randomGradient() {
      console.log("randomGradient called");
      
      // Don't change if in blog mode
      if (this.previousSet) {
        console.log("Random gradient skipped: Currently in blog reading mode");
        return;
      }
      
      const action = () => {
        let newIndex;
        // Ensure we don't select the same set again
        do {
          newIndex = Math.floor(Math.random() * gradientSets.length);
        } while (newIndex === this.currentSetIndex && gradientSets.length > 1);
        
        this.currentSetIndex = newIndex;
        console.log(`Randomly selected set ${this.currentSetIndex}`);
        this.transitionTo(gradientSets[this.currentSetIndex]);
      };
      
      // If we're already transitioning, queue this action for later
      if (this.isTransitioning) {
        console.log("Transition in progress, queuing random gradient");
        this.pendingOperation = action;
        return;
      }
      
      // Otherwise, just do it now
      action();
    }

    transitionTo(targetSet: any) {
      console.log("Transitioning to:", targetSet);
      
      // Prevent transition spam by ensuring minimum time between transitions
      const now = Date.now();
      const timeSinceLastTransition = now - this.lastTransitionTime;
      
      if (timeSinceLastTransition < 200) {
        console.log("Transition requested too soon after previous transition, ignoring");
        return;
      }
      
      if (!this.canvas || !targetSet) {
        console.log("Cannot transition - missing canvas/target");
        return;
      }
      
      // If already transitioning, abort current transition and start new one
      if (this.isTransitioning) {
        console.log("Already transitioning - forcing new transition");
      }
      
      this.isTransitioning = true;
      this.lastTransitionTime = now;
      
      // Get current colors
      const startSet = this.getCurrentSet();
      if (!startSet) {
        console.log("Cannot get current colors");
        this.isTransitioning = false;
        return;
      }
      
      // Make sure all colors have # prefix
      const formattedTargetSet = {
        color1: this.ensureHexFormat(targetSet.color1),
        color2: this.ensureHexFormat(targetSet.color2),
        color3: this.ensureHexFormat(targetSet.color3),
        color4: this.ensureHexFormat(targetSet.color4)
      };
      
      const formattedStartSet = {
        color1: this.ensureHexFormat(startSet.color1),
        color2: this.ensureHexFormat(startSet.color2),
        color3: this.ensureHexFormat(startSet.color3),
        color4: this.ensureHexFormat(startSet.color4)
      };
      
      // Animation start time
      const startTime = performance.now();
      
      // Animation function
      const animate = (currentTime: number) => {
        const elapsed = currentTime - startTime;
        const progress = Math.min(elapsed / this.transitionDuration, 1);
        
        // Use easing for smoother transition
        const easedProgress = progress < 0.5 ? 2 * progress * progress : 1 - Math.pow(-2 * progress + 2, 2) / 2;
        
        if (progress < 1) {
          // Calculate interpolated colors
          const interpolatedColors = [
            this.interpolateColor(formattedStartSet.color1, formattedTargetSet.color1, easedProgress),
            this.interpolateColor(formattedStartSet.color2, formattedTargetSet.color2, easedProgress),
            this.interpolateColor(formattedStartSet.color3, formattedTargetSet.color3, easedProgress),
            this.interpolateColor(formattedStartSet.color4, formattedTargetSet.color4, easedProgress)
          ];
          
          // BOTH update the CSS variables and the actual gradient
          this.setGradientColors(
            interpolatedColors[0],
            interpolatedColors[1],
            interpolatedColors[2],
            interpolatedColors[3]
          );
          
          // Update the actual gradient via our new updateColors method
          if (this.gradient && this.gradient.updateColors) {
            this.gradient.updateColors(interpolatedColors);
          }
          
          requestAnimationFrame(animate);
        } else {
          // Final state - set the exact target colors
          const finalColors = [
            formattedTargetSet.color1,
            formattedTargetSet.color2,
            formattedTargetSet.color3,
            formattedTargetSet.color4
          ];
          
          // Update CSS variables
          this.setGradientColors(
            finalColors[0],
            finalColors[1],
            finalColors[2],
            finalColors[3]
          );
          
          // Update actual gradient
          if (this.gradient && this.gradient.updateColors) {
            this.gradient.updateColors(finalColors);
          }
          
          console.log("Transition complete");
          this.isTransitioning = false;
          
          // Process any pending operation
          if (this.pendingOperation) {
            console.log("Processing pending gradient operation");
            const operation = this.pendingOperation;
            this.pendingOperation = null;
            
            // Execute pending operation after small delay to avoid immediate transitions
            setTimeout(() => {
              operation();
            }, 50);
          }
        }
      };
      
      requestAnimationFrame(animate);
    }
    
    // Helper to ensure a color has # prefix if it's a hex color
    ensureHexFormat(color: string): string {
      if (!color) return "#000000";
      
      // If it already starts with # or rgb, return as is
      if (color.startsWith('#') || color.startsWith('rgb')) {
        return color;
      }
      
      // Check if it's a hex string without the # (e.g. "ffffff")
      if (/^[0-9A-Fa-f]{6}$/.test(color)) {
        return `#${color}`;
      }
      
      // If it doesn't match any expected format, return as is
      return color;
    }
    
    // Helper to set gradient colors in CSS variables
    setGradientColors(color1: string, color2: string, color3: string, color4: string) {
      if (!this.canvas) return;
      
      this.canvas.style.setProperty('--gradient-color-1', color1);
      this.canvas.style.setProperty('--gradient-color-2', color2);
      this.canvas.style.setProperty('--gradient-color-3', color3);
      this.canvas.style.setProperty('--gradient-color-4', color4);
    }
    
    // Color interpolation helper (using hex colors)
    interpolateColor(color1: string, color2: string, factor: number) {
      // Convert to RGB
      const c1 = this.hexToRgb(color1);
      const c2 = this.hexToRgb(color2);
      
      if (!c1 || !c2) return color1;
      
      // Interpolate
      const r = Math.round(c1[0] + factor * (c2[0] - c1[0]));
      const g = Math.round(c1[1] + factor * (c2[1] - c1[1]));
      const b = Math.round(c1[2] + factor * (c2[2] - c1[2]));
      
      // Return in hex format
      return this.rgbToHex(r, g, b);
    }
    
    // Convert hex to RGB array
    hexToRgb(hex: string): number[] | null {
      // Handle rgb format
      if (hex.startsWith('rgb')) {
        const match = hex.match(/rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*([\d.]+))?\)/);
        if (match) {
          return [
            parseInt(match[1], 10),
            parseInt(match[2], 10),
            parseInt(match[3], 10)
          ];
        }
        return null;
      }
      
      // Handle hex format
      let cleanHex = hex.replace('#', '');
      
      // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
      if (cleanHex.length === 3) {
        cleanHex = cleanHex.split('').map(c => c + c).join('');
      }
      
      // Validate hex
      if (cleanHex.length !== 6) {
        console.error("Invalid hex format:", hex);
        return null;
      }
      
      // Parse hex
      const r = parseInt(cleanHex.substring(0, 2), 16);
      const g = parseInt(cleanHex.substring(2, 4), 16);
      const b = parseInt(cleanHex.substring(4, 6), 16);
      
      if (isNaN(r) || isNaN(g) || isNaN(b)) {
        console.error("Invalid hex values:", hex);
        return null;
      }
      
      return [r, g, b];
    }
    
    // Convert RGB to hex
    rgbToHex(r: number, g: number, b: number): string {
      // Ensure values are in valid range
      r = Math.min(255, Math.max(0, r));
      g = Math.min(255, Math.max(0, g));
      b = Math.min(255, Math.max(0, b));
      
      // Convert to hex
      const hex = '#' + 
        r.toString(16).padStart(2, '0') + 
        g.toString(16).padStart(2, '0') + 
        b.toString(16).padStart(2, '0');
        
      return hex;
    }
  }
  
  // Ensures the script runs only in the browser
  if (typeof window !== 'undefined') {
    // Explicitly define the type to fix TypeScript errors
    let gradient: GradientType | null = null;
    let isResizing = false;
    
    // Create the gradient manager on window
    if (!window.gradientManager) {
      console.log("Creating gradientManager on window");
      window.gradientManager = new GradientManager();
    }
    
    // Make functions directly available globally
    window.cycleGradientSet = () => {
      console.log("Global cycleGradientSet called");
      window.gradientManager.nextGradient();
    };
    
    window.randomizeGradient = () => {
      console.log("Global randomizeGradient called");
      window.gradientManager.randomGradient();
    };
    
    // Initialize on page load
    document.addEventListener('DOMContentLoaded', () => {
      console.log("GradientCanvas: DOMContentLoaded event");
      const canvas = document.getElementById('gradient-canvas');
      if (!canvas) {
        console.error("Canvas element not found");
        return;
      }
      
      // Initialize the gradient if not already done
      if (!gradient) {
        console.log("Initializing gradient on DOMContentLoaded");
        gradient = new Gradient() as unknown as GradientType;
        gradient = addUpdateColorsToGradient(gradient);
        gradient.initGradient('#gradient-canvas');
        
        // Set the gradient in the manager
        window.gradientManager.gradient = gradient;
        window.gradientManager.initialize();
        
        // Set up ResizeObserver for efficient resize handling
        const resizeObserver = new ResizeObserver(() => {
          if (!isResizing && gradient) {
            isResizing = true;
            requestAnimationFrame(() => {
              gradient?.resize();
              isResizing = false;
            });
          }
        });
        
        // Observe the window size changes
        resizeObserver.observe(document.body);
        
        // Check for blog mode (after a small delay to ensure DOM is ready)
        setTimeout(() => {
          window.gradientManager.handlePageChange();
        }, 100);
      }
    });
    
    // For Astro view transitions, reinitialize when navigating
    document.addEventListener('astro:page-load', () => {
      console.log("GradientCanvas: astro:page-load event");
      const canvas = document.getElementById('gradient-canvas');
      if (!canvas) {
        console.error("Canvas element not found after transition");
        return;
      }
      
      // Check if gradient is already initialized
      if (!gradient) {
        console.log("Initializing gradient after page transition");
        gradient = new Gradient() as unknown as GradientType;
        gradient = addUpdateColorsToGradient(gradient);
        gradient.initGradient('#gradient-canvas');
        
        // Set the gradient in the manager
        window.gradientManager.gradient = gradient;
        window.gradientManager.initialize();
        
        // Set up ResizeObserver for efficient resize handling
        const resizeObserver = new ResizeObserver(() => {
          if (!isResizing && gradient) {
            isResizing = true;
            requestAnimationFrame(() => {
              gradient?.resize();
              isResizing = false;
            });
          }
        });
        
        // Observe the window size changes
        resizeObserver.observe(document.body);
      }
      
      // Handle page change after navigation (with a small delay to ensure DOM is ready)
      setTimeout(() => {
        window.gradientManager.handlePageChange();
      }, 100);
    });
    
    // If the page is already loaded, initialize immediately
    if (document.readyState === 'complete' || document.readyState === 'interactive') {
      console.log("Page already loaded, initializing gradient immediately");
      const canvas = document.getElementById('gradient-canvas');
      if (canvas && !gradient) {
        gradient = new Gradient() as unknown as GradientType;
        gradient = addUpdateColorsToGradient(gradient);
        gradient.initGradient('#gradient-canvas');
        
        // Set the gradient in the manager
        window.gradientManager.gradient = gradient;
        window.gradientManager.initialize();
      }
    }
  }

  // Add type definition for global window object
  declare global {
    interface Window {
      gradientManager: any;
      myGradientInstance: any;
      cycleGradientSet: () => void;
      randomizeGradient: () => void;
    }
  }
</script>
</file>

<file path="components/ui/BaseCard.astro">
---
interface Props {
  className?: string;
}

const { className = "" } = Astro.props;
---

<div class={`hover-card ${className}`}>
  <slot />
</div>

<style>
  .hover-card {
    position: relative;
    background-color: rgba(0, 0, 0, 0.15);
    padding: 1.5rem;
    border-radius: 1.5rem;
    border: 1px solid rgba(82, 82, 91, 0.1);
    transition: transform 0.4s ease, background-color 0.4s ease, border 0.4s ease, box-shadow 0.4s ease;
    overflow: hidden;
    backdrop-filter: blur(10px);
  }
  
  .hover-card::before, .hover-card::after {
    content: '';
    position: absolute;
    inset: 0;
    border-radius: 1.5rem;
    pointer-events: none;
    z-index: 1;
    transition: opacity 0.4s ease;
    opacity: 0;
  }
  
  /* Subtle gradient following cursor */
  .hover-card::before {
    background: radial-gradient(
      circle at var(--mouse-x, 50%) var(--mouse-y, 50%),
      rgba(255, 255, 255, 0.03) 0%,
      transparent 60%
    );
  }
  
  /* Border glow effect */
  .hover-card::after {
    content: '';
    position: absolute;
    inset: -1px;
    border-radius: 1.5rem;
    padding: 1px;
    background: linear-gradient(
      to bottom right,
      rgba(255, 255, 255, 0.2),
      rgba(113, 113, 122, 0.1),
      rgba(82, 82, 91, 0.3)
    );
    -webkit-mask: 
      linear-gradient(#fff 0 0) content-box, 
      linear-gradient(#fff 0 0);
    -webkit-mask-composite: xor;
    mask-composite: exclude;
    opacity: 0;
    transition: opacity 0.4s ease;
  }
  
  .hover-card:hover {
    background-color: rgba(0, 0, 0, 0.3);
    backdrop-filter: blur(10px);
    /* transform: translateY(-4px); */
    box-shadow: 0 8px 30px rgba(0, 0, 0, 0.3);
    border-color: rgba(113, 113, 122, 0.3);
  }
  
  .hover-card:hover::before {
    opacity: 1;
  }
  
  .hover-card:hover::after {
    opacity: 1;
  }
  
  .hover-card > * {
    position: relative;
    z-index: 2;
  }

  .project-link {
    display: inline-flex;
    align-items: center;
    padding: 0.5rem 1rem;
    color: #d4d4d8;
    opacity: 0.8;
    background-color: rgba(0, 0, 0, 0.25);
    text-decoration: none;
    border-radius: 8px;
    transition: all 0.2s;
    border: 1px solid rgba(113, 113, 122, 0.3);
  }

  .project-link:hover {
    opacity: 0.9;
    background-color: rgba(113, 113, 122, 0.15);
    text-shadow: 0 0 1px rgba(255, 255, 255, 0.10);
    /* transform: translateY(-2px); */
  }

  .project-card {
    transition: transform 0.3s ease;
  }
</style>

<script>
  // Mouse tracking code that properly works with Astro's view transitions
  function setupHoverCards() {
    const cards = document.querySelectorAll('.hover-card');
    
    cards.forEach((card) => {
      // Cast card to HTMLElement explicitly
      const cardElement = card as HTMLElement;
      
      // Now add event listeners using the properly typed element
      cardElement.addEventListener('mousemove', (e: MouseEvent) => {
        const rect = cardElement.getBoundingClientRect();
        const x = ((e.clientX - rect.left) / rect.width) * 100;
        const y = ((e.clientY - rect.top) / rect.height) * 100;
        
        cardElement.style.setProperty('--mouse-x', `${x}%`);
        cardElement.style.setProperty('--mouse-y', `${y}%`);
      });
      
      cardElement.addEventListener('mouseleave', () => {
        const currentTransform = getComputedStyle(cardElement).transform;
        cardElement.style.transition = 'all 0.6s cubic-bezier(0.19, 1, 0.22, 1)';
        
        setTimeout(() => {
          cardElement.style.transition = 'transform 0.4s ease, background-color 0.4s ease, border 0.4s ease, box-shadow 0.4s ease';
        }, 600);
      });
    });
  }

  // Run for initial page load
  document.addEventListener('DOMContentLoaded', setupHoverCards);
  
  // Run again after each navigation when using view transitions
  document.addEventListener('astro:page-load', setupHoverCards);
</script>
</file>

<file path="components/ui/BaseHead.astro">
---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import '../../styles/global.css';
import { SITE_TITLE } from '../../consts';
interface Props {
	title: string;
	description: string;
	image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image = '/blog-placeholder-1.jpg' } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="sitemap" href="/sitemap-index.xml" />
<link
	rel="alternate"
	type="application/rss+xml"
	title={SITE_TITLE}
	href={new URL('rss.xml', Astro.site)}
/>
<meta name="generator" content={Astro.generator} />

<!-- Font preloads -->
<link
	rel="preload"
	href="/fonts/Inter-Variable.woff2"
	as="font"
	type="font/woff2"
	crossorigin="anonymous"
/>
<link
	rel="preload"
	href="/fonts/Inter-Variable-Italic.woff2"
	as="font"
	type="font/woff2"
	crossorigin="anonymous"
/>
<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />
</file>

<file path="components/ui/DesktopNav.astro">
---
// src/components/navigation/DesktopNav.astro
import { ClientRouter } from 'astro:transitions';

const navLinks = [
  { href: "/", label: "Home" },
  { href: "/projects", label: "Projects" },
  { href: "/blog", label: "Blog" },
  { href: "/contact", label: "Contact" }
];
---

<ClientRouter />

<div class="flex justify-center w-full p-4 flex-shrink-0">
  <nav class="desktop-nav backdrop-blur-md rounded-xl max-w-2xl w-auto mx-auto relative overflow-hidden nav-container" transition:persist>
    <!-- Initial shimmer loading effect overlay -->
    <div class="shimmer-overlay"></div>
    
    <!-- Content with glass effect -->
    <div class="flex flex-wrap justify-center items-center p-3 relative z-10">
      <!-- Links with divider bars -->
      {navLinks.map((link, index) => (
        <>
          <a href={link.href} class="nav-link">
            <span>{link.label}</span>
            <div class="glow-overlay"></div>
          </a>
          
          {index < navLinks.length - 1 && <div class="divider"></div>}
        </>
      ))}
    </div>
  </nav>
</div>

<style>
  .nav-container {
    background-color: rgba(0, 0, 0, 0.25);
    border: 0.8px solid rgba(82, 82, 91, 0.2);
    box-shadow: 0px 0px 17.6px -6px rgba(162, 162, 162, 0.15),
                inset 0px 0px 10px rgba(255, 255, 255, 0.05);
    /* Initial state - will be made visible by JS */
    opacity: 0;
    transform: translateY(-20px);
    transition: opacity 0.3s ease, transform 0.3s ease, background-color 0s;
  }
  
  /* Pop-in animation - simplified for clean transitions */
  @keyframes navSlideIn {
    0% {
      transform: translateY(-20px);
      opacity: 0;
    }
    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }
  
  /* Shimmer loading effect */
  .shimmer-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      rgba(255, 255, 255, 0) 0%,
      rgba(255, 255, 255, 0.1) 50%,
      rgba(255, 255, 255, 0) 100%
    );
    z-index: 20;
    pointer-events: none;
    animation: shimmer 0.8s linear forwards;
    background-size: 100% 100%;
    background-position: -100% 0;
  }
  
  @keyframes shimmer {
    0% {
      background-position: -100% 0;
    }
    100% {
      background-position: 200% 0;
      opacity: 0;
    }
  }
  
  /* Individual link animations */
  .nav-link {
    color: #d4d4d8;
    padding: 0.5rem 1rem;
    border-radius: 0.5rem;
    transition: all 0.3s;
    opacity: 0;
    transform: translateY(10px);
    /* We'll handle this animation through JS */
  }
  
  @keyframes linkFadeIn {
    to {
      opacity: 0.8;
      transform: translateY(0);
    }
  }
  
  .nav-link:hover {
    opacity: 0.9;
    background-color: rgba(113, 113, 122, 0.15);
    text-shadow: 0 0 1px rgba(255, 255, 255, 0.10);
  }
  
  .nav-link:hover .glow-overlay {
    opacity: 0;
  }
  
  .divider {
    height: 1.8rem;
    border-right: 1px solid rgba(82, 82, 91, 0.5);
    margin: 0 0.25rem;
    opacity: 0;
    /* We'll handle this animation through JS */
  }
  
  @keyframes fadeIn {
    to {
      opacity: 1;
    }
  }

  /* Glow overlay for the inner glow effect */
  .glow-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    opacity: 0;
    transition: opacity 0.3s;
    background: radial-gradient(circle at center, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
  }

  /* Prevent transition flashing */
  :global(html.astro-transition-fallback) .nav-container,
  :global(html.astro-transition) .nav-container {
    background-color: rgba(0, 0, 0, 0.25) !important;
    transition: transform 0.3s ease, opacity 0.3s ease !important;
    transition-property: transform, opacity !important;
  }

  @media (max-width: 640px) {
    .nav-link {
      padding: 0.3rem 0.5rem;
    }
  }
</style>

<script>
  // Flag to track whether the initial animation has played
  let initialAnimationPlayed = false;

  // Function to run the animation only on first load
  function setupNavAnimation() {
    // Get DOM elements
    const navContainer = document.querySelector('.nav-container') as HTMLElement | null;
    const navLinks = document.querySelectorAll('.nav-link') as NodeListOf<HTMLElement>;
    const dividers = document.querySelectorAll('.divider') as NodeListOf<HTMLElement>;
    
    if (!navContainer) return;
    

    if (navContainer.getAttribute('data-animated') === 'true') {

      requestAnimationFrame(() => {
        navContainer.style.opacity = "1";
        navContainer.style.transform = "translateY(0)";
        
        navLinks.forEach((link) => {
          if (!link.classList.contains('text-white')) { // Not active link
            link.style.opacity = "0.8";
          }
          link.style.transform = "translateY(0)";
        });
        
        dividers.forEach((divider) => {
          divider.style.opacity = "1";
        });
      });
      return;
    }
    
    // Only run the animation if it hasn't played yet
    if (!initialAnimationPlayed) {
      // Store the flag in sessionStorage to persist across page navigation
      if (sessionStorage.getItem('navAnimationPlayed') !== 'true') {
        console.log("Playing initial nav animation");
        
        // Apply the animation to the nav container
        navContainer.style.animation = "navSlideIn 0.8s forwards 0.2s cubic-bezier(0.22, 1, 0.36, 1)";
        
        // Apply animations to links with staggered delay
        navLinks.forEach((link, index) => {
          link.style.animation = `linkFadeIn 0.5s forwards ${0.3 + (index * 0.1)}s`;
        });
        
        // Apply animation to dividers
        dividers.forEach((divider) => {
          divider.style.animation = "fadeIn 0.5s forwards 0.8s";
        });
        
        // Mark that we've played the animation
        sessionStorage.setItem('navAnimationPlayed', 'true');
        initialAnimationPlayed = true;
        navContainer.setAttribute('data-animated', 'true');
      } else {
        console.log("Skipping nav animation - already played");
        // Just show the navbar without animation
        navContainer.style.opacity = "1";
        navContainer.style.transform = "translateY(0)";
        
        navLinks.forEach((link) => {
          link.style.opacity = "0.8";
          link.style.transform = "translateY(0)";
        });
        
        dividers.forEach((divider) => {
          divider.style.opacity = "1";
        });
        navContainer.setAttribute('data-animated', 'true');
      }
    }
  }

  // Function to update active link highlight
  function updateActiveLink() {
    const currentPath = window.location.pathname;
    const navLinks = document.querySelectorAll('.nav-link') as NodeListOf<HTMLElement>;
    
    navLinks.forEach(link => {
      const href = link.getAttribute('href') || '';
      if (href === currentPath || 
          (href !== '/' && currentPath.startsWith(href))) {
        link.classList.add('text-white');
        link.style.opacity = '1';
      }
    });
  }
  
  // Set up on page load
  document.addEventListener('DOMContentLoaded', () => {
    setupNavAnimation();
    updateActiveLink();
  });
  
  document.addEventListener('astro:page-load', () => {
    updateActiveLink();
  });
</script>
</file>

<file path="components/ui/Footer.astro">
---
const today = new Date();
---

<footer>
	&copy; {today.getFullYear()} Răzvan Olariu. All rights reserved.
</footer>
<style>
	footer {
		padding: 2em 1em 6em 1em;
		background: linear-gradient(var(--gray-gradient)) no-repeat;
		color: rgb(var(--gray));
		text-align: center;
		font-size: 0.9em;
		opacity: 0.4;
	}
	.social-links {
		display: flex;
		justify-content: center;
		gap: 1em;
		margin-top: 1em;
	}
	.social-links a {
		text-decoration: none;
		color: rgb(var(--gray));
	}
	.social-links a:hover {
		color: rgb(var(--gray-dark));
	}
</style>
</file>

<file path="components/ui/FormattedDate.astro">
---
interface Props {
	date: Date;
}

const { date } = Astro.props;
---

<time datetime={date.toISOString()}>
	{
		date.toLocaleDateString('en-us', {
			year: 'numeric',
			month: 'short',
			day: 'numeric',
		})
	}
</time>
</file>

<file path="components/ui/GradientDebug.astro">
---
// A small debug component to test gradient functionality
---

<div class="fixed bottom-4 right-4 z-50 bg-black/50 backdrop-blur-md p-4 rounded-lg border border-zinc-700/50 text-white">
  <h3 class="text-sm font-medium mb-2">Gradient Debug</h3>
  <div class="flex flex-col gap-2">
    <button id="debug-cycle" class="text-sm bg-zinc-800 hover:bg-zinc-700 py-1 px-3 rounded">
      Cycle
    </button>
    <button id="debug-random" class="text-sm bg-zinc-800 hover:bg-zinc-700 py-1 px-3 rounded">
      Random
    </button>
    <button id="debug-blog" class="text-sm bg-zinc-800 hover:bg-zinc-700 py-1 px-3 rounded">
      Toggle Blog Mode
    </button>
  </div>
</div>

<script>
  // Set up debug buttons
  document.addEventListener('DOMContentLoaded', () => {
    const cycleBtn = document.getElementById('debug-cycle');
    const randomBtn = document.getElementById('debug-random');
    const blogBtn = document.getElementById('debug-blog');
    
    let blogMode = window.location.pathname.includes('/blog/');
    
    cycleBtn?.addEventListener('click', () => {
      console.log("Debug: Cycle button clicked");
      if (window.gradientManager) {
        console.log("Using gradientManager.nextGradient()");
        window.gradientManager.nextGradient();
      } else if (typeof window.cycleGradientSet === 'function') {
        console.log("Using window.cycleGradientSet()");
        window.cycleGradientSet();
      } else {
        console.error("No gradient cycling function found");
      }
    });
    
    randomBtn?.addEventListener('click', () => {
      console.log("Debug: Random button clicked");
      if (window.gradientManager) {
        console.log("Using gradientManager.randomGradient()");
        window.gradientManager.randomGradient();
      } else if (typeof window.randomizeGradient === 'function') {
        console.log("Using window.randomizeGradient()");
        window.randomizeGradient();
      } else {
        console.error("No gradient randomize function found");
      }
    });
    
    blogBtn?.addEventListener('click', () => {
      blogMode = !blogMode;
      console.log(`Debug: Blog mode ${blogMode ? 'enabled' : 'disabled'}`);
      
      // Update body class to match
      if (blogMode) {
        document.body.classList.add('blog-article');
      } else {
        document.body.classList.remove('blog-article');
      }
      
      // Trigger blog mode change
      if (window.gradientManager) {
        window.gradientManager.handlePageChange();
      } else if (typeof window.setBlogMode === 'function') {
        window.setBlogMode(blogMode);
      }
    });
  });
  
  // Re-attach event listeners after Astro view transitions
  document.addEventListener('astro:page-load', () => {
    const cycleBtn = document.getElementById('debug-cycle');
    const randomBtn = document.getElementById('debug-random');
    const blogBtn = document.getElementById('debug-blog');
    
    let blogMode = window.location.pathname.includes('/blog/');
    
    cycleBtn?.addEventListener('click', () => {
      if (window.gradientManager) {
        window.gradientManager.nextGradient();
      } else if (typeof window.cycleGradientSet === 'function') {
        window.cycleGradientSet();
      }
    });
    
    randomBtn?.addEventListener('click', () => {
      if (window.gradientManager) {
        window.gradientManager.randomGradient();
      } else if (typeof window.randomizeGradient === 'function') {
        window.randomizeGradient();
      }
    });
    
    blogBtn?.addEventListener('click', () => {
      blogMode = !blogMode;
      // Update body class to match
      if (blogMode) {
        document.body.classList.add('blog-article');
      } else {
        document.body.classList.remove('blog-article');
      }
      
      // Trigger blog mode change
      if (window.gradientManager) {
        window.gradientManager.handlePageChange();
      } else if (typeof window.setBlogMode === 'function') {
        window.setBlogMode(blogMode);
      }
    });
  });
</script>
</file>

<file path="components/ui/HeaderLink.astro">
---
import type { HTMLAttributes } from 'astro/types';

type Props = HTMLAttributes<'a'>;

const { href, class: className, ...props } = Astro.props;
const pathname = Astro.url.pathname.replace(import.meta.env.BASE_URL, '');
const subpath = pathname.match(/[^\/]+/g);
const isActive = href === pathname || href === '/' + (subpath?.[0] || '');
---

<a href={href} class:list={[className, { active: isActive }]} {...props}>
	<slot />
</a>
<style>
	a {
		display: inline-block;
		text-decoration: none;
	}
	a.active {
		font-weight: bolder;
		text-decoration: underline;
	}
</style>
</file>

<file path="components/ui/MobileNav.astro">
---
// src/components/navigation/MobileNav.astro
import { ClientRouter } from 'astro:transitions';

const navLinks = [
  { href: "/", label: "Home" },
  { href: "/projects", label: "Projects" },
  // { href: "/book-reviews", label: "Book Reviews" },
  { href: "/blog", label: "Blog" },
  { href: "/contact", label: "Contact" }
];
---

<ClientRouter />

<div class="mobile-nav-container" transition:persist>
  <!-- Mobile header with blur - bar style -->
  <div class="top-bar backdrop-blur-md bg-black/20 flex items-center justify-between px-4 py-3">
    <!-- Logo centered -->
    <div class="flex-1 text-center">
      <a href="/" class="text-white text-xl font-medium opacity-90 hover:opacity-100 transition-opacity">
        ZVIX
      </a>
    </div>

    <!-- Mobile Menu Button on right -->
    <button
      id="mobile-menu-button"
      class="z-10 flex items-center justify-center w-10 h-10 rounded-lg bg-black/30 backdrop-blur-md border border-zinc-800/50"
      aria-label="Toggle navigation menu"
    >
      <div class="burger-icon">
        <span class="burger-line"></span>
        <span class="burger-line"></span>
        <span class="burger-line"></span>
      </div>
    </button>
  </div>

  <!-- Mobile Navigation Dropdown (Initially hidden) -->
  <div
    id="mobile-nav"
    class="mt-4 overflow-hidden h-0 transition-all duration-500 px-4"
  >
    <nav class="backdrop-blur-md rounded-xl bg-black/20 border border-zinc-800/30 p-4">
      <ul class="flex flex-col items-center space-y-4">
        {navLinks.map((link) => (
          <li class="w-full nav-item">
            <a href={link.href} class="mobile-nav-link block text-center w-full">
              {link.label}
            </a>
          </li>
        ))}
      </ul>
    </nav>
  </div>
</div>

<style>
  /* Bar-like header instead of capsule */
  .top-bar {
    width: 100%;
    height: 60px;
    border-bottom: 1px solid rgba(82, 82, 91, 0.1);
  }
  
  .mobile-nav-link {
    color: #d4d4d8;
    padding: 0.75rem 1rem;
    border-radius: 0.5rem;
    transition: all 0.3s;
    opacity: 0.8;
    background-color: transparent; /* Explicit default background */
  }

  .mobile-nav-link:hover {
    opacity: 0.9;
    background-color: rgba(113, 113, 122, 0.15);
    text-shadow: 0 0 1px rgba(255, 255, 255, 0.10);
  }
  
  /* Active state - more specific to override hover state */
  .mobile-nav-link.active-link {
    opacity: 1;
    background-color: rgba(0, 0, 0, 0.3) !important;
    color: white !important;
  }
  
  /* Burger icon animation styles */
  .burger-icon {
    position: relative;
    width: 18px;
    height: 14px;
    pointer-events: none; /* Make sure clicks go through to the button */
  }
  
  .burger-line {
    position: absolute;
    left: 0;
    width: 18px;
    height: 2px;
    background-color: currentColor;
    border-radius: 2px;
    transition: transform 0.3s ease, opacity 0.3s ease;
    pointer-events: none; /* Make sure clicks go through to the button */
  }
  
  .burger-line:nth-child(1) {
    top: 2px;
  }
  
  .burger-line:nth-child(2) {
    top: 6px;
  }
  
  .burger-line:nth-child(3) {
    top: 10px;
  }
  
  /* Burger animation active state */
  .burger-active .burger-line:nth-child(1) {
    transform: translateY(4px) rotate(45deg);
  }
  
  .burger-active .burger-line:nth-child(2) {
    opacity: 0;
  }
  
  .burger-active .burger-line:nth-child(3) {
    transform: translateY(-4px) rotate(-45deg);
  }
  
  /* Menu item animation */
  .nav-item {
    opacity: 0;
    transform: translateY(10px);
    transition: opacity 0.3s ease, transform 0.3s ease;
  }
  
  .nav-item.visible {
    opacity: 1;
    transform: translateY(0);
  }
</style>

<script>
  // Function to setup the mobile menu toggle
  function setupMobileMenu() {
    // Create a new listener on each page load
    const menuButton = document.getElementById("mobile-menu-button") as HTMLButtonElement | null;
    const mobileNav = document.getElementById("mobile-nav") as HTMLDivElement | null;
    const burgerIcon = document.querySelector(".burger-icon") as HTMLDivElement | null;
    const navItems = document.querySelectorAll<HTMLLIElement>(".nav-item");
    
    if (!menuButton || !mobileNav || !burgerIcon) return;
    
    // Remove any existing click handlers by cloning the button
    const newMenuButton = menuButton.cloneNode(true) as HTMLButtonElement;
    if (menuButton.parentNode) {
      menuButton.parentNode.replaceChild(newMenuButton, menuButton);
    }
    
    // Add a new click handler to the cloned button
    newMenuButton.addEventListener("click", () => {
      // Toggle burger icon
      burgerIcon.classList.toggle("burger-active");
      
      // Toggle mobile menu visibility
      if (mobileNav.classList.contains("h-0")) {
        // Open menu
        mobileNav.classList.remove("h-0");
        mobileNav.classList.add("h-auto");
        
        // Animate nav items
        navItems.forEach((item, index) => {
          setTimeout(() => {
            item.classList.add("visible");
          }, 100 + (index * 50));
        });
      } else {
        // Close menu
        mobileNav.classList.add("h-0");
        mobileNav.classList.remove("h-auto");
        
        // Hide nav items
        navItems.forEach((item) => {
          item.classList.remove("visible");
        });
      }
    });
    
    // Close menu when clicking nav links
    const navLinks = document.querySelectorAll<HTMLAnchorElement>(".mobile-nav-link");
    navLinks.forEach((link) => {
      // Clone and replace to remove old listeners
      const newLink = link.cloneNode(true) as HTMLAnchorElement;
      if (link.parentNode) {
        link.parentNode.replaceChild(newLink, link);
      }
      
      // Add new click listener
      newLink.addEventListener("click", () => {
        // Close the menu
        mobileNav.classList.add("h-0");
        mobileNav.classList.remove("h-auto");
        burgerIcon.classList.remove("burger-active");
        
        // Hide nav items
        navItems.forEach((item) => {
          item.classList.remove("visible");
        });
      });
    });

    // Reset all link styles first
    const allLinks = document.querySelectorAll<HTMLAnchorElement>('.mobile-nav-link');
    allLinks.forEach(link => {
      // Reset to default styles
      link.classList.remove('active-link', 'text-white', 'bg-black/30');
      link.style.opacity = '0.8';
      link.style.backgroundColor = 'transparent';
    });

    // Highlight active page
    const currentPath = window.location.pathname;
    
    allLinks.forEach(link => {
      const href = link.getAttribute('href') || '';
      if (href === currentPath || 
          (href !== '/' && currentPath.startsWith(href))) {
        // Use a specific class for active links
        link.classList.add('active-link');
      }
    });
  }

  // Function to reset any stuck hover states
  function resetHoverStates() {
    const navLinks = document.querySelectorAll<HTMLAnchorElement>('.mobile-nav-link');
    navLinks.forEach(link => {
      if (!link.classList.contains('active-link')) {
        link.style.backgroundColor = 'transparent';
        link.style.opacity = '0.8';
      }
    });
  }

  // Run on initial page load
  document.addEventListener('DOMContentLoaded', () => {
    setupMobileMenu();
    resetHoverStates();
  });
  
  // Run after each page transition
  document.addEventListener('astro:page-load', () => {
    setupMobileMenu();
    resetHoverStates();
  });
  
  // Also run after page swaps to ensure transitions don't keep hover states
  document.addEventListener('astro:after-swap', resetHoverStates);
</script>
</file>

<file path="components/ui/NavBar.astro">
---
// src/components/NavBar.astro
import DesktopNav from './DesktopNav.astro';
import MobileNav from './MobileNav.astro';
---

<header class="fixed top-0 w-full z-50" transition:persist>
  <!-- Desktop Navigation - Only rendered on larger screens -->
  <div class="hidden md:block">
    <DesktopNav />
  </div>

  <!-- Mobile Navigation - Only loaded when visible -->
  <div class="md:hidden">
    <MobileNav/>
  </div>
</header>


<div class="nav-spacer"></div>

<style>
  header {
    background-color: transparent;
  }
  

  .nav-spacer {
    height: 100px;
    width: 100%;
  }
  
  @media (max-width: 768px) {
    .nav-spacer {
      height: 70px; 
    }
  }
</style>
</file>

<file path="content/blog/first-post.md">
---
title: 'First post'
description: 'Lorem ipsum dolor sit amet'
pubDate: 'Jul 08 2022'
heroImage: '/blog-placeholder-3.jpg'
---

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vitae ultricies leo integer malesuada nunc vel risus commodo viverra. Adipiscing enim eu turpis egestas pretium. Euismod elementum nisi quis eleifend quam adipiscing. In hac habitasse platea dictumst vestibulum. Sagittis purus sit amet volutpat. Netus et malesuada fames ac turpis egestas. Eget magna fermentum iaculis eu non diam phasellus vestibulum lorem. Varius sit amet mattis vulputate enim. Habitasse platea dictumst quisque sagittis. Integer quis auctor elit sed vulputate mi. Dictumst quisque sagittis purus sit amet.

Morbi tristique senectus et netus. Id semper risus in hendrerit gravida rutrum quisque non tellus. Habitasse platea dictumst quisque sagittis purus sit amet. Tellus molestie nunc non blandit massa. Cursus vitae congue mauris rhoncus. Accumsan tortor posuere ac ut. Fringilla urna porttitor rhoncus dolor. Elit ullamcorper dignissim cras tincidunt lobortis. In cursus turpis massa tincidunt dui ut ornare lectus. Integer feugiat scelerisque varius morbi enim nunc. Bibendum neque egestas congue quisque egestas diam. Cras ornare arcu dui vivamus arcu felis bibendum. Dignissim suspendisse in est ante in nibh mauris. Sed tempus urna et pharetra pharetra massa massa ultricies mi.

Mollis nunc sed id semper risus in. Convallis a cras semper auctor neque. Diam sit amet nisl suscipit. Lacus viverra vitae congue eu consequat ac felis donec. Egestas integer eget aliquet nibh praesent tristique magna sit amet. Eget magna fermentum iaculis eu non diam. In vitae turpis massa sed elementum. Tristique et egestas quis ipsum suspendisse ultrices. Eget lorem dolor sed viverra ipsum. Vel turpis nunc eget lorem dolor sed viverra. Posuere ac ut consequat semper viverra nam. Laoreet suspendisse interdum consectetur libero id faucibus. Diam phasellus vestibulum lorem sed risus ultricies tristique. Rhoncus dolor purus non enim praesent elementum facilisis. Ultrices tincidunt arcu non sodales neque. Tempus egestas sed sed risus pretium quam vulputate. Viverra suspendisse potenti nullam ac tortor vitae purus faucibus ornare. Fringilla urna porttitor rhoncus dolor purus non. Amet dictum sit amet justo donec enim.

Mattis ullamcorper velit sed ullamcorper morbi tincidunt. Tortor posuere ac ut consequat semper viverra. Tellus mauris a diam maecenas sed enim ut sem viverra. Venenatis urna cursus eget nunc scelerisque viverra mauris in. Arcu ac tortor dignissim convallis aenean et tortor at. Curabitur gravida arcu ac tortor dignissim convallis aenean et tortor. Egestas tellus rutrum tellus pellentesque eu. Fusce ut placerat orci nulla pellentesque dignissim enim sit amet. Ut enim blandit volutpat maecenas volutpat blandit aliquam etiam. Id donec ultrices tincidunt arcu. Id cursus metus aliquam eleifend mi.

Tempus quam pellentesque nec nam aliquam sem. Risus at ultrices mi tempus imperdiet. Id porta nibh venenatis cras sed felis eget velit. Ipsum a arcu cursus vitae. Facilisis magna etiam tempor orci eu lobortis elementum. Tincidunt dui ut ornare lectus sit. Quisque non tellus orci ac. Blandit libero volutpat sed cras. Nec tincidunt praesent semper feugiat nibh sed pulvinar proin gravida. Egestas integer eget aliquet nibh praesent tristique magna.
</file>

<file path="content/blog/markdown-style-guide.md">
---
title: 'Markdown Style Guide'
description: 'Here is a sample of some basic Markdown syntax that can be used when writing Markdown content in Astro.'
pubDate: 'Jun 19 2024'
heroImage: '/blog-placeholder-1.jpg'
---

Here is a sample of some basic Markdown syntax that can be used when writing Markdown content in Astro.

## Headings

The following HTML `<h1>`—`<h6>` elements represent six levels of section headings. `<h1>` is the highest section level while `<h6>` is the lowest.

# H1

## H2

### H3

#### H4

##### H5

###### H6

## Paragraph

Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.

Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.

## Images

### Syntax

```markdown
![Alt text](./full/or/relative/path/of/image)
```

### Output

![blog placeholder](/blog-placeholder-about.jpg)

## Blockquotes

The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a `footer` or `cite` element, and optionally with in-line changes such as annotations and abbreviations.

### Blockquote without attribution

#### Syntax

```markdown
> Tiam, ad mint andaepu dandae nostion secatur sequo quae.  
> **Note** that you can use _Markdown syntax_ within a blockquote.
```

#### Output

> Tiam, ad mint andaepu dandae nostion secatur sequo quae.  
> **Note** that you can use _Markdown syntax_ within a blockquote.

### Blockquote with attribution

#### Syntax

```markdown
> Don't communicate by sharing memory, share memory by communicating.<br>
> — <cite>Rob Pike[^1]</cite>
```

#### Output

> Don't communicate by sharing memory, share memory by communicating.<br>
> — <cite>Rob Pike[^1]</cite>

[^1]: The above quote is excerpted from Rob Pike's [talk](https://www.youtube.com/watch?v=PAAkCSZUG1c) during Gopherfest, November 18, 2015.

## Tables

### Syntax

```markdown
| Italics   | Bold     | Code   |
| --------- | -------- | ------ |
| _italics_ | **bold** | `code` |
```

### Output

| Italics   | Bold     | Code   |
| --------- | -------- | ------ |
| _italics_ | **bold** | `code` |

## Code Blocks

### Syntax

we can use 3 backticks ``` in new line and write snippet and close with 3 backticks on new line and to highlight language specific syntax, write one word of language name after first 3 backticks, for eg. html, javascript, css, markdown, typescript, txt, bash

````markdown
```html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Example HTML5 Document</title>
  </head>
  <body>
    <p>Test</p>
  </body>
</html>
```
````

### Output

```html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Example HTML5 Document</title>
  </head>
  <body>
    <p>Test</p>
  </body>
</html>
```

## List Types

### Ordered List

#### Syntax

```markdown
1. First item
2. Second item
3. Third item
```

#### Output

1. First item
2. Second item
3. Third item

### Unordered List

#### Syntax

```markdown
- List item
- Another item
- And another item
```

#### Output

- List item
- Another item
- And another item

### Nested list

#### Syntax

```markdown
- Fruit
  - Apple
  - Orange
  - Banana
- Dairy
  - Milk
  - Cheese
```

#### Output

- Fruit
  - Apple
  - Orange
  - Banana
- Dairy
  - Milk
  - Cheese

## Other Elements — abbr, sub, sup, kbd, mark

### Syntax

```markdown
<abbr title="Graphics Interchange Format">GIF</abbr> is a bitmap image format.

H<sub>2</sub>O

X<sup>n</sup> + Y<sup>n</sup> = Z<sup>n</sup>

Press <kbd>CTRL</kbd> + <kbd>ALT</kbd> + <kbd>Delete</kbd> to end the session.

Most <mark>salamanders</mark> are nocturnal, and hunt for insects, worms, and other small creatures.
```

### Output

<abbr title="Graphics Interchange Format">GIF</abbr> is a bitmap image format.

H<sub>2</sub>O

X<sup>n</sup> + Y<sup>n</sup> = Z<sup>n</sup>

Press <kbd>CTRL</kbd> + <kbd>ALT</kbd> + <kbd>Delete</kbd> to end the session.

Most <mark>salamanders</mark> are nocturnal, and hunt for insects, worms, and other small creatures.
</file>

<file path="content/blog/second-post.md">
---
title: 'Second post'
description: 'Lorem ipsum dolor sit amet'
pubDate: 'Jul 15 2022'
heroImage: '/blog-placeholder-4.jpg'
---

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vitae ultricies leo integer malesuada nunc vel risus commodo viverra. Adipiscing enim eu turpis egestas pretium. Euismod elementum nisi quis eleifend quam adipiscing. In hac habitasse platea dictumst vestibulum. Sagittis purus sit amet volutpat. Netus et malesuada fames ac turpis egestas. Eget magna fermentum iaculis eu non diam phasellus vestibulum lorem. Varius sit amet mattis vulputate enim. Habitasse platea dictumst quisque sagittis. Integer quis auctor elit sed vulputate mi. Dictumst quisque sagittis purus sit amet.

Morbi tristique senectus et netus. Id semper risus in hendrerit gravida rutrum quisque non tellus. Habitasse platea dictumst quisque sagittis purus sit amet. Tellus molestie nunc non blandit massa. Cursus vitae congue mauris rhoncus. Accumsan tortor posuere ac ut. Fringilla urna porttitor rhoncus dolor. Elit ullamcorper dignissim cras tincidunt lobortis. In cursus turpis massa tincidunt dui ut ornare lectus. Integer feugiat scelerisque varius morbi enim nunc. Bibendum neque egestas congue quisque egestas diam. Cras ornare arcu dui vivamus arcu felis bibendum. Dignissim suspendisse in est ante in nibh mauris. Sed tempus urna et pharetra pharetra massa massa ultricies mi.

Mollis nunc sed id semper risus in. Convallis a cras semper auctor neque. Diam sit amet nisl suscipit. Lacus viverra vitae congue eu consequat ac felis donec. Egestas integer eget aliquet nibh praesent tristique magna sit amet. Eget magna fermentum iaculis eu non diam. In vitae turpis massa sed elementum. Tristique et egestas quis ipsum suspendisse ultrices. Eget lorem dolor sed viverra ipsum. Vel turpis nunc eget lorem dolor sed viverra. Posuere ac ut consequat semper viverra nam. Laoreet suspendisse interdum consectetur libero id faucibus. Diam phasellus vestibulum lorem sed risus ultricies tristique. Rhoncus dolor purus non enim praesent elementum facilisis. Ultrices tincidunt arcu non sodales neque. Tempus egestas sed sed risus pretium quam vulputate. Viverra suspendisse potenti nullam ac tortor vitae purus faucibus ornare. Fringilla urna porttitor rhoncus dolor purus non. Amet dictum sit amet justo donec enim.

Mattis ullamcorper velit sed ullamcorper morbi tincidunt. Tortor posuere ac ut consequat semper viverra. Tellus mauris a diam maecenas sed enim ut sem viverra. Venenatis urna cursus eget nunc scelerisque viverra mauris in. Arcu ac tortor dignissim convallis aenean et tortor at. Curabitur gravida arcu ac tortor dignissim convallis aenean et tortor. Egestas tellus rutrum tellus pellentesque eu. Fusce ut placerat orci nulla pellentesque dignissim enim sit amet. Ut enim blandit volutpat maecenas volutpat blandit aliquam etiam. Id donec ultrices tincidunt arcu. Id cursus metus aliquam eleifend mi.

Tempus quam pellentesque nec nam aliquam sem. Risus at ultrices mi tempus imperdiet. Id porta nibh venenatis cras sed felis eget velit. Ipsum a arcu cursus vitae. Facilisis magna etiam tempor orci eu lobortis elementum. Tincidunt dui ut ornare lectus sit. Quisque non tellus orci ac. Blandit libero volutpat sed cras. Nec tincidunt praesent semper feugiat nibh sed pulvinar proin gravida. Egestas integer eget aliquet nibh praesent tristique magna.
</file>

<file path="content/blog/third-post.md">
---
title: 'Third post'
description: 'Lorem ipsum dolor sit amet'
pubDate: 'Jul 22 2022'
heroImage: '/blog-placeholder-2.jpg'
---

Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vitae ultricies leo integer malesuada nunc vel risus commodo viverra. Adipiscing enim eu turpis egestas pretium. Euismod elementum nisi quis eleifend quam adipiscing. In hac habitasse platea dictumst vestibulum. Sagittis purus sit amet volutpat. Netus et malesuada fames ac turpis egestas. Eget magna fermentum iaculis eu non diam phasellus vestibulum lorem. Varius sit amet mattis vulputate enim. Habitasse platea dictumst quisque sagittis. Integer quis auctor elit sed vulputate mi. Dictumst quisque sagittis purus sit amet.

Morbi tristique senectus et netus. Id semper risus in hendrerit gravida rutrum quisque non tellus. Habitasse platea dictumst quisque sagittis purus sit amet. Tellus molestie nunc non blandit massa. Cursus vitae congue mauris rhoncus. Accumsan tortor posuere ac ut. Fringilla urna porttitor rhoncus dolor. Elit ullamcorper dignissim cras tincidunt lobortis. In cursus turpis massa tincidunt dui ut ornare lectus. Integer feugiat scelerisque varius morbi enim nunc. Bibendum neque egestas congue quisque egestas diam. Cras ornare arcu dui vivamus arcu felis bibendum. Dignissim suspendisse in est ante in nibh mauris. Sed tempus urna et pharetra pharetra massa massa ultricies mi.

Mollis nunc sed id semper risus in. Convallis a cras semper auctor neque. Diam sit amet nisl suscipit. Lacus viverra vitae congue eu consequat ac felis donec. Egestas integer eget aliquet nibh praesent tristique magna sit amet. Eget magna fermentum iaculis eu non diam. In vitae turpis massa sed elementum. Tristique et egestas quis ipsum suspendisse ultrices. Eget lorem dolor sed viverra ipsum. Vel turpis nunc eget lorem dolor sed viverra. Posuere ac ut consequat semper viverra nam. Laoreet suspendisse interdum consectetur libero id faucibus. Diam phasellus vestibulum lorem sed risus ultricies tristique. Rhoncus dolor purus non enim praesent elementum facilisis. Ultrices tincidunt arcu non sodales neque. Tempus egestas sed sed risus pretium quam vulputate. Viverra suspendisse potenti nullam ac tortor vitae purus faucibus ornare. Fringilla urna porttitor rhoncus dolor purus non. Amet dictum sit amet justo donec enim.

Mattis ullamcorper velit sed ullamcorper morbi tincidunt. Tortor posuere ac ut consequat semper viverra. Tellus mauris a diam maecenas sed enim ut sem viverra. Venenatis urna cursus eget nunc scelerisque viverra mauris in. Arcu ac tortor dignissim convallis aenean et tortor at. Curabitur gravida arcu ac tortor dignissim convallis aenean et tortor. Egestas tellus rutrum tellus pellentesque eu. Fusce ut placerat orci nulla pellentesque dignissim enim sit amet. Ut enim blandit volutpat maecenas volutpat blandit aliquam etiam. Id donec ultrices tincidunt arcu. Id cursus metus aliquam eleifend mi.

Tempus quam pellentesque nec nam aliquam sem. Risus at ultrices mi tempus imperdiet. Id porta nibh venenatis cras sed felis eget velit. Ipsum a arcu cursus vitae. Facilisis magna etiam tempor orci eu lobortis elementum. Tincidunt dui ut ornare lectus sit. Quisque non tellus orci ac. Blandit libero volutpat sed cras. Nec tincidunt praesent semper feugiat nibh sed pulvinar proin gravida. Egestas integer eget aliquet nibh praesent tristique magna.
</file>

<file path="content/blog/using-mdx.mdx">
---
title: 'Using MDX'
description: 'Lorem ipsum dolor sit amet'
pubDate: 'Jun 01 2024'
heroImage: '/blog-placeholder-5.jpg'
---

This theme comes with the [@astrojs/mdx](https://docs.astro.build/en/guides/integrations-guide/mdx/) integration installed and configured in your `astro.config.mjs` config file. If you prefer not to use MDX, you can disable support by removing the integration from your config file.

## Why MDX?

MDX is a special flavor of Markdown that supports embedded JavaScript & JSX syntax. This unlocks the ability to [mix JavaScript and UI Components into your Markdown content](https://docs.astro.build/en/guides/markdown-content/#mdx-features) for things like interactive charts or alerts.

If you have existing content authored in MDX, this integration will hopefully make migrating to Astro a breeze.

## Example

Here is how you import and use a UI component inside of MDX.  
When you open this page in the browser, you should see the clickable button below.



## More Links

- [MDX Syntax Documentation](https://mdxjs.com/docs/what-is-mdx)
- [Astro Usage Documentation](https://docs.astro.build/en/guides/markdown-content/#markdown-and-mdx-pages)
- **Note:** [Client Directives](https://docs.astro.build/en/reference/directives-reference/#client-directives) are still required to create interactive components. Otherwise, all components in your MDX will render as static HTML (no JavaScript) by default.
</file>

<file path="layouts/BaseLayout.astro">
---
import NavBar from "../components/ui/NavBar.astro";
import Footer from "../components/ui/Footer.astro";
import BaseHead from "../components/ui/BaseHead.astro";
import GradientCanvas from "../components/ui/Gradient/GradientCanvas.astro";
import { SITE_DESCRIPTION } from "../consts";
import { ClientRouter } from 'astro:transitions';

// Accept pageTitle as a prop
interface Props {
  pageTitle?: string;
  enableRecaptcha?: boolean;
  enableEmailJS?: boolean;
}

const { 
  pageTitle = "Răzvan Olariu", 
  enableRecaptcha = false,
  enableEmailJS = false 
} = Astro.props;

// Check if current page is a blog post
const isBlogPage = Astro.url.pathname.includes('/blog/');
const bodyClass = isBlogPage ? 'blog-article' : '';
---

<!doctype html>
<html lang="en">
  <head>
    <BaseHead title={pageTitle} description={SITE_DESCRIPTION} />
    <ClientRouter />
    
    {/* Load reCAPTCHA if enabled */}
    {enableRecaptcha && (
      <script is:inline src="https://www.google.com/recaptcha/api.js" async defer></script>
    )}
    
    {/* Load EmailJS if enabled */}
    {enableEmailJS && (
      <script is:inline src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js"></script>
    )}
    
    <script>
      // Make sure gradient persists during page transitions
      document.addEventListener('astro:page-load', () => {
        // Check if we're on a blog page and add the class if needed
        const isBlogPage = window.location.pathname.includes('/blog/');
        if (isBlogPage) {
          document.body.classList.add('blog-article');
        } else {
          document.body.classList.remove('blog-article');
        }
        
        // Make sure any animations from previous pages are reset
        const resetAnimations = () => {
          const navContainer = document.querySelector('.nav-container') as HTMLElement | null;
          if (navContainer && navContainer.getAttribute('data-animated') === 'true') {
            // Ensure consistent styling without animations
            navContainer.style.animation = 'none';
            navContainer.style.opacity = '1';
            navContainer.style.transform = 'translateY(0)';
          }
        };
        
        // Use requestAnimationFrame to ensure DOM is ready
        requestAnimationFrame(resetAnimations);
      });
    </script>
  </head>

  <body class={bodyClass}>
    <GradientCanvas transition:persist />
    <main>
      <NavBar />
      <slot />
      <Footer />
    </main>
  </body>
</html>
</file>

<file path="layouts/BlogPost.astro">
---
import type { CollectionEntry } from 'astro:content';
import BaseLayout from '../layouts/BaseLayout.astro';
import FormattedDate from '../components/ui/FormattedDate.astro';

type Props = CollectionEntry<'blog'>['data'];

const { title, description, pubDate, updatedDate, heroImage } = Astro.props;
---

<BaseLayout pageTitle={title}>
  <div class="w-full max-w-4xl mx-auto mt-8 md:mt-16 mb-24 px-4 md:px-8">
    <!-- Hero Section -->
    <div class="mb-8 text-center">
      <div class="mb-3 text-zinc-400 text-sm">
        <FormattedDate date={pubDate} />
        {updatedDate && (
          <span class="italic ml-2">
            (Updated: <FormattedDate date={updatedDate} />)
          </span>
        )}
      </div>
      
      <h1 class="text-[#FFFFFF] text-4xl md:text-5xl font-bold opacity-90 antialiased tracking-tight mb-6">
        {title}
      </h1>
      
      <p class="text-zinc-300 mt-3 max-w-2xl mx-auto text-lg opacity-80">
        {description}
      </p>
    </div>
    
    <!-- Hero Image -->
    {heroImage && (
      <div class="relative mb-12 rounded-xl overflow-hidden shadow-2xl">
        <div class="aspect-video">
          <img 
            src={heroImage} 
            alt={title}
            class="w-full h-full object-cover" 
          />
        </div>
        <div class="absolute inset-0 bg-gradient-to-t from-black/30 to-transparent"></div>
      </div>
    )}
    
    <!-- Content - Using a div with custom styling instead of BaseCard -->
    <div class="blog-content-container mb-6">
      <div class="prose p-6 md:p-8">
        <slot />
      </div>
    </div>
    
    <!-- Back to Blog -->
    <div class="text-center mt-8">
      <a href="/blog" class="inline-flex items-center px-5 py-2 rounded-full bg-black/30 border border-zinc-700/30 text-zinc-300 hover:bg-black/40 transition-colors">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Back to Blog
      </a>
    </div>
  </div>
</BaseLayout>

<style>
  /* Blog content container that doesn't hover */
  .blog-content-container {
    position: relative;
    background-color: rgba(0, 0, 0, 0.15);
    padding: 0;
    border-radius: 1.5rem;
    border: 1px solid rgba(82, 82, 91, 0.1);
    overflow: hidden;
    backdrop-filter: blur(10px);
    animation: fadeIn 0.6s ease-out forwards;
  }
</style>

<style is:global>
  /* We're using is:global to ensure these styles apply to the slot content */
  .prose {
    color: #e4e4e7;
  }
  
  .prose p {
    margin: 1.5em 0;
    line-height: 1.75;
    opacity: 0.9;
  }
  
  .prose h2 {
    color: #ffffff;
    margin: 2em 0 0.5em 0;
    font-size: 1.8rem;
    font-weight: 600;
    position: relative;
    padding-bottom: 0.5rem;
  }
  
  .prose h2::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    width: 40px;
    height: 3px;
    background: linear-gradient(90deg, rgba(113, 113, 122, 0.8), rgba(113, 113, 122, 0.2));
    border-radius: 3px;
  }
  
  .prose h3 {
    color: #ffffff;
    margin: 1.5em 0 0.5em 0;
    font-size: 1.4rem;
    font-weight: 600;
  }
  
  .prose ul, .prose ol {
    margin: 1em 0;
    padding-left: 2em;
  }
  
  .prose li {
    margin: 0.5em 0;
    opacity: 0.9;
  }
  
  .prose a {
    color: #60a5fa;
    text-decoration: none;
    transition: all 0.2s;
    border-bottom: 1px dotted rgba(96, 165, 250, 0.4);
  }
  
  .prose a:hover {
    border-bottom: 1px solid rgba(96, 165, 250, 0.8);
  }
  
  .prose code {
    font-family: monospace;
    background-color: rgba(63, 63, 70, 0.4);
    padding: 0.2em 0.4em;
    border-radius: 0.25em;
    font-size: 0.9em;
  }
  
  .prose pre {
    background-color: rgba(24, 24, 27, 0.6);
    padding: 1em;
    border-radius: 0.5em;
    overflow-x: auto;
    border: 1px solid rgba(82, 82, 91, 0.3);
    margin: 1.5em 0;
  }
  
  .prose pre code {
    background-color: transparent;
    padding: 0;
  }
  
  .prose blockquote {
    border-left: 4px solid #60a5fa;
    padding: 0.5em 0 0.5em 1em;
    margin: 1.5em 0;
    color: #a1a1aa;
    font-style: italic;
    background-color: rgba(63, 63, 70, 0.2);
    border-radius: 0 0.25em 0.25em 0;
  }
  
  .prose img {
    max-width: 100%;
    height: auto;
    border-radius: 0.5em;
    margin: 1.5em 0;
    border: 1px solid rgba(82, 82, 91, 0.3);
  }
  
  .prose table {
    width: 100%;
    border-collapse: collapse;
    margin: 1.5em 0;
    background-color: rgba(24, 24, 27, 0.4);
    border-radius: 0.5em;
    overflow: hidden;
  }
  
  .prose th, .prose td {
    padding: 0.75em;
    border: 1px solid rgba(82, 82, 91, 0.3);
    text-align: left;
  }
  
  .prose th {
    background-color: rgba(63, 63, 70, 0.4);
    font-weight: 600;
    color: white;
  }
  
  .prose tr:nth-child(even) {
    background-color: rgba(63, 63, 70, 0.1);
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
</file>

<file path="pages/blog/[...slug].astro">
---
import { type CollectionEntry, getCollection } from 'astro:content';
import BlogPost from '../../layouts/BlogPost.astro';
import { render } from 'astro:content';

export async function getStaticPaths() {
	const posts = await getCollection('blog');
	return posts.map((post) => ({
		params: { slug: post.id},
		props: post,
	}));
}
type Props = CollectionEntry<'blog'>;

const post = Astro.props;
const { Content } = await render(post);
---

<BlogPost {...post.data}>
	<Content />
</BlogPost>
</file>

<file path="pages/blog/index.astro">
---
import BaseLayout from "../../layouts/BaseLayout.astro";
import FormattedDate from '../../components/ui/FormattedDate.astro';
import BaseCard from '../../components/ui/BaseCard.astro';

import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection } from 'astro:content';
const posts = (await getCollection('blog')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);
---

<BaseLayout pageTitle="Blog | Răzvan Olariu">
  <div class="w-full max-w-6xl mx-auto mt-16 mb-24 px-4 md:px-8">
    <div class="flex flex-col gap-2 mb-12 text-center">
      <h1 class="text-[#FFFFFF] text-5xl font-bold opacity-90 antialiased tracking-tight">
        Blog
      </h1>
      <p class="text-zinc-400 mt-3 max-w-2xl mx-auto">
        Thoughts, tutorials, and insights on technology, finance, and personal projects.
      </p>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
      {posts.map((post, index) => (
        <BaseCard className={`blog-card hover-scale ${index === 0 ? "md:col-span-2" : ""}`}>
          <a href={`/blog/${post.id}/`} class="block group">
            <div class="p-4">
              <div class="blog-image-container rounded-xl overflow-hidden mb-4 h-64">
                <img 
                  src={post.data.heroImage} 
                  alt={post.data.title} 
                  class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
                  loading="lazy" 
                />
              </div>
              
              <div class="date mb-2 text-zinc-400 text-sm">
                <FormattedDate date={post.data.pubDate} />
              </div>
              
              <h2 class="text-[#FFFFFF] text-2xl font-semibold antialiased tracking-tight mb-3 transition-colors duration-300 group-hover:text-zinc-100">
                {post.data.title}
              </h2>
              
              <p class="text-zinc-300 opacity-75 line-clamp-3 mb-4">
                {post.data.description}
              </p>
              
              <div class="flex justify-end">
                <span class="inline-flex items-center text-zinc-300 font-medium text-sm group-hover:text-zinc-100 transition-all duration-300">
                  Read more
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1 transform translate-x-0 group-hover:translate-x-1 transition-transform duration-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
                  </svg>
                </span>
              </div>
            </div>
          </a>
        </BaseCard>
      ))}
    </div>
  </div>
</BaseLayout>

<style>
  .blog-card {
    transition: all 0.4s cubic-bezier(0.215, 0.61, 0.355, 1);
    border: 1px solid rgba(82, 82, 91, 0.15);
  }
  
  .hover-scale:hover {
    transform: translateY(-4px);
  }
  
  .blog-image-container {
    position: relative;
    transition: all 0.3s ease;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
  }
  
  .blog-image-container:hover {
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.25);
  }
  
  /* Add a subtle fade-in animation for blog posts */
  .grid {
    animation: fadeInUp 0.8s ease-out forwards;
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>
</file>

<file path="pages/contact.astro">
---
import BaseLayout from "../layouts/BaseLayout.astro";
import SocialMediaButton from "../components/about/SocialMediaButton.astro";
import BaseCard from "../components/ui/BaseCard.astro";
---

<BaseLayout pageTitle="Contact | Răzvan Olariu">
  <div class="max-w-3xl mx-auto min-h-screen px-6 py-8 flex items-start justify-center mt-8">
    <!-- Centered Contact Info Card -->
    <BaseCard className="w-full p-8 md:p-10">
      <h1 class="text-[#FFFFFF] text-4xl font-bold mb-8 text-center opacity-90">Contact Me</h1>
      
      <div class="space-y-8">
        <div class="contact-item">
          <h3 class="text-[#FFFFFF] text-lg font-medium mb-2 opacity-90">Email</h3>
          <a href="mailto:contact@razvanolariu.com" class="text-zinc-300 hover:text-white transition-colors opacity-80">
            contact@razvanolariu.com
          </a>
        </div>
        
        <div class="contact-item">
          <h3 class="text-[#FFFFFF] text-lg font-medium mb-2 opacity-90">Location</h3>
          <p class="text-zinc-300 opacity-80">Bucharest, Romania</p>
        </div>
        
        <div class="contact-item">
          <h3 class="text-[#FFFFFF] text-lg font-medium mb-2 opacity-90">Available Through</h3>
          <p class="text-zinc-300 opacity-80">Email, LinkedIn, or GitHub</p>
        </div>
        
        <div class="contact-item">
          <h3 class="text-[#FFFFFF] text-lg font-medium mb-4 opacity-90">Connect</h3>
          <div class="social-links flex gap-3 justify-center mt-2">
            <SocialMediaButton platform="github" username="RazvanO2" />
            <SocialMediaButton platform="linkedin" username="razvan-olariu" />
            <SocialMediaButton platform="youtube" username="zvix" />
          </div>
        </div>
      </div>
    </BaseCard>
  </div>
</BaseLayout>

<style>
  .contact-item {
    text-align: center;
  }
</style>
</file>

<file path="pages/index.astro">
---
import BaseLayout from "../layouts/BaseLayout.astro";
import SocialMediaButton from "../components/about/SocialMediaButton.astro";
import ProfileColumn from "../components/about/ProfileColumn.astro";
import ExperienceCard from "../components/about/ExperienceCard.astro";
import CourseCard from "../components/about/CourseCard.astro";
import GradientDebug from "../components/ui/GradientDebug.astro";
---

<BaseLayout>
  <div class="max-w-7xl mx-auto min-h-screen flex flex-col lg:flex-row">
    <!-- Left column (fixed) -->
    <ProfileColumn name="Răzvan Olariu" nickname="ZVIX">
      <SocialMediaButton platform="github" username="RazvanO2" />
      <SocialMediaButton platform="linkedin" username="razvan-olariu" />
      <SocialMediaButton platform="youtube" username="zvix" />
    </ProfileColumn>
    <!-- Right column (scrollable) -->
    <div class="lg:w-3/5 lg:ml-auto py-12 px-8">
      <div class="about-section mb-16">
        <p class="text-[#FFFFFF] text-lg opacity-80 mb-4"></p>
        <p class="text-[#FFFFFF] text-lg opacity-80 mb-4">
          Hey there! I'm Răzvan, a Finance graduate with a passion for
          technology and programming. After focusing on Financial Engineering
          during my studies, I'm now planning to pursue a Data Science master's
          program at the University of Bucharest to build on both my technical
          and analytical skills.
        </p>
        <p class="text-[#FFFFFF] text-lg opacity-80 mb-4">
          I've enjoyed working on various tech projects—from creating Python
          automation tools that streamlined workflows at Flanco to building
          custom PCs and developing iOS apps with Swift. My experience with
          programming languages like Python and Swift has helped me solve
            various problems and improve processes in my work.
        </p>
        <p class="text-[#FFFFFF] text-lg opacity-80 mb-4">
          When I'm not coding or diving into financial models, you'll find me
          bodybuilding, following Formula 1, or build new apps. I'm always curious about exploring new technologies and
          looking forward to connecting with people who share similar interests
          in the tech world.
        </p>
      </div>

      <!-- Experience Section -->
      <div class="experience-section mb-16">
        <h2
          class="text-[#FFFFFF] text-2xl font-medium uppercase mb-8 opacity-80"
        >
          Experience
        </h2>
        <ExperienceCard
          title="IT Hardware/Software Specialist"
          company="Freelance"
          duration="JAN 2015 - Present"
          description={[
            "Provided IT support services to small businesses and individuals, including hardware and software troubleshooting, network setup, and system maintenance.",
            "Developed a custom PC building service, offering personalized builds based on client requirements.",
            "Overclocked and optimized gaming PCs for clients, improving performance by up to 30%.",
            "Repaired phones and MacBooks, replacing screens, batteries, and other components.",
          ]}
          skills={[
            "PC Technician ",
            "Hardcore Overclocking",
            "Troubleshooting",
          ]}
        />
        <ExperienceCard
          title="Web Content Developer"
          company="Flanco"
          duration="AUG 2023 - OCT 2023"
          description={[
            "Developed and maintained the company's website by creating and updating product pages, ensuring that the content is accurate and up-to-date.",
            "Independently engineered two in-house tools using Python Selenium and Pandas, automating product data extraction and processing from manufacturer websites.",
            "These tools reduced task completion time by ~65%, saving approximately 20 hours per week.",
            "Left the position because I couldn't balance it with my studies.",
          ]}
          skills={[
            "HTML/CSS",
            "JavaScript",
            "Python",
            "Web Scraping",
            "Data Processing",
          ]}
        />
      </div>

      <!-- Education Section -->
      <div class="education-section mb-16">
        <h2
          class="text-[#FFFFFF] text-2xl font-medium uppercase mb-8 opacity-80"
        >
          Education
        </h2>

        <ExperienceCard
          title="Bachelor of Finance"
          duration="2021 - 2024"
          description={[
            "Specialized in Financial Engineering",
            'Thesis: "Usage of Machine Learning Methods in portfolio optimization"',
            "Thesis Grade: 9",
          ]}
        >
          <p class="text-[#FFFFFF] opacity-70 mb-3">
            Bucharest University of Economic Studies
          </p>
        </ExperienceCard>

        <ExperienceCard
          title="High School Diploma"
          duration="2017 - 2021"
          description={[
            "Natural Sciences and Mathematics Profile",
            "Participated in the National Olympiad of Information and Technology",
            "Ranked 44th out of 846 participants nationwide, placing in the top 5.2% of competitors.",
          ]}
        >
          <p class="text-[#FFFFFF] opacity-70 mb-3">
            Theoretical High School "Dimitrie Bolintineanu", Bucharest
          </p>
        </ExperienceCard>
      </div>

      <!-- Courses Section -->
      <div class="courses-section mb-16">
        <h2
          class="text-[#FFFFFF] text-2xl font-medium uppercase mb-8 opacity-80"
        >
          Courses & Certifications
        </h2>

        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <CourseCard
            title="Python 3 Deep Dive Part 1-4"
            provider="Udemy"
            year="2023"
            description="Completed 4-course series covering Python basics, data structures, Iterators/Generators, JSON, object-oriented programming, and more."
          />

          <CourseCard
            title="iOS & Swift - The Complete iOS App Development Bootcamp"
            provider="Dr. Angela Yu"
            year="2022"
            description="Learned iOS app development, including Swift, Xcode, UIKit, and SwiftUI, by building 10+ apps."
          />

          <CourseCard
            title="AWS Cloud Practitioner"
            provider="Amazon Web Services"
            year="2021"
            description="Certified in AWS fundamentals, cloud concepts, security, and AWS core services."
          />

          <CourseCard
            title="UI/UX Design Fundamentals"
            provider="Udemy"
            year="2020"
            description="Learned principles of user-centered design, wireframing, prototyping, and usability testing."
          />
        </div>
      </div>
    </div>
  </div>
  
  <!-- Include the debug panel during development (remove for production) -->
  <!-- <GradientDebug /> -->
</BaseLayout>
</file>

<file path="pages/projects.astro">
---
import BaseLayout from "../layouts/BaseLayout.astro"
import ProjectCard from "../components/projects/ProjectCard.astro";

import PersonalWebsite from "../assets/projects/personal_website.png";
import HouseholdImage from "../assets/projects/household_electricity_forecasting.png";
import LicentaImage from "../assets/projects/licenta.png";
import weatherAppImage from "../assets/projects/weather.png";
import homelab from "../assets/projects/homelab.png";
---

<BaseLayout pageTitle="Projects | Răzvan Olariu">
<div class="w-full max-w-6xl mx-auto mt-16 mb-24 px-4 md:px-8">
    <div class="flex flex-col gap-2 mb-12 text-center">
        <h1 class="text-[#FFFFFF] text-5xl font-bold opacity-90 antialiased tracking-tight">
            My Projects
        </h1>
        <p class="text-zinc-400 mt-3 max-w-2xl mx-auto">
            A collection of my recent work and personal projects. Each project represents unique challenges I've tackled and skills I've developed.
        </p>
    </div>
    
    <div class="grid grid-cols-1 gap-10">
        <ProjectCard
            title="Application of Machine Learning Methods in Financial Portfolio Optimization"
            description="Created a machine learning model for financial portfolio optimization that balances risk and return. The project implements gradient boosting algorithms to predict asset performance and construct optimal allocation strategies."
            technologies={["Python", "Pandas", "Scikit-learn", "Financial Analysis"]}
            isDataScienceProject={true}
            imageUrl={LicentaImage}
        />
        <ProjectCard
        title="Homelab Server"
        description="I snagged a budget-friendly HP Elitedesk for just €100 with an i7 8700 processor and 16GB RAM, then upgraded it to 48GB RAM with a 2TB HDD and 500GB SSD. I've transformed it into a versatile homelab server running Proxmox and Docker, hosting multiple virtual machines and containers. My setup now runs several useful services including my personal website, Pi-hole for ad-blocking, a Wireguard VPN server for secure access, Immich for keeping my photos safely backed up, and TrueNAS for all my file storage needs."
        technologies={["Linux", "Networking", "cron-jobs", "Proxmox", "Docker", "TrueNAS"]}
        liveLink="#"
        sourceLink="#"
        imageUrl={homelab}
    />
        <ProjectCard
            title="Electricity Usage Forecasting"
            description="Developed a time-series forecasting model to predict household electricity consumption using demographic data and historical usage patterns. Computed the missing data using various methods. The model analyzes variables like household size, income, and previous usage to provide accurate forecasts."
            technologies={["Python", "Pandas", "Scikit-learn", "Time Series Analysis"]}
            notebookLink="https://github.com/RazvanO2/Household_Electricity_Forecasting/blob/main/Household_Electricity_Forecasting_Razvan-Gabriel_Olariu.ipynb"
            isDataScienceProject={true}
            imageUrl={HouseholdImage}
        />
        
        <ProjectCard
            title="WeatherNow App"
            description="A responsive weather application with beautiful visualizations and 7-day forecasts. Features dark mode, location detection, and hourly predictions with detailed atmospheric conditions tracking."
            technologies={["JavaScript", "Chart.js", "OpenWeather API", "Geolocation"]}
            liveLink="#"
            sourceLink="https://github.com/RazvanO2/weatherNow"
            imageUrl={weatherAppImage}
        />

            <ProjectCard
            title="Personal Website"
            description="A modern portfolio website built with Astro and TailwindCSS. Features a responsive design with a beautiful animated gradient background, interactive hover cards, a book review section showcasing books I've read, and a blog where I share my thoughts on technology and finance."
            technologies={["Astro.js", "TailwindCSS", "TypeScript"]}
            liveLink="#"
            sourceLink="#"
            imageUrl={PersonalWebsite}
        />

    </div>
</div>
</BaseLayout>

<style>
    /* Add a subtle fade-in animation for projects */
    .grid {
        animation: fadeInUp 0.8s ease-out forwards;
    }
    
    @keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
</style>
</file>

<file path="pages/rss.xml.js">
export async function GET(context) {
const posts = await getCollection('blog');
return rss({
⋮----
items: posts.map((post) => ({
</file>

<file path="scripts/contact.js">
// File: src/pages/api/contact.js
export async function POST({ request }) {
⋮----
const data = await request.formData();
⋮----
// Get form data
const name = data.get('name');
const email = data.get('email');
const subject = data.get('subject');
const message = data.get('message');
const recaptchaResponse = data.get('g-recaptcha-response');
⋮----
// Validate form inputs
⋮----
return new Response(
JSON.stringify({
⋮----
// Validate reCAPTCHA
⋮----
// Verify reCAPTCHA with Google
const recaptchaVerification = await verifyRecaptcha(recaptchaResponse);
⋮----
// Process the form submission (e.g., send email)
// This is where you'd typically integrate with an email sending service
// For example, using Nodemailer, SendGrid, or a similar service
⋮----
// Return success response
⋮----
console.error('Error processing contact form:', error);
⋮----
async function verifyRecaptcha(token) {
⋮----
const response = await fetch('https://www.google.com/recaptcha/api/siteverify', {
⋮----
return await response.json();
</file>

<file path="scripts/gradient-controller.js">
// src/scripts/gradient-controller.js
⋮----
// --- State and Configuration ---
⋮----
// NOTE: Ensure the first set matches the initial CSS variables in GradientCanvas.astro
⋮----
let currentSetIndex = 0; // Index within gradientSets
let previousSetBeforeBlog = null; // Stores the set (colors array) before entering blog mode
⋮----
let transitionTimer = null; // Store timeout/interval ID if needed
const transitionDuration = 1500; // 1.5 seconds
⋮----
// --- Gradient Interaction Functions ---
⋮----
/**
 * Initiates a smooth transition to a target color set.
 * @param {string[]} targetColors - Array of 4 color strings (hex/rgb).
 */
function transitionTo(targetColors) {
⋮----
// First try to use the gradientManager from GradientCanvas.astro
⋮----
window.gradientManager.transitionTo(targetSet);
⋮----
// Fall back to using myGradientInstance if available
⋮----
console.warn("Cannot transition: Gradient instance not ready.");
⋮----
// Get current colors
⋮----
// Convert normalized RGB back to hex/rgb strings if needed
startColors = window.myGradientInstance.sectionColors.map(rgbArrayToHex);
⋮----
// Fallback: Read from CSS (less accurate if called mid-transition)
const canvas = document.getElementById('gradient-canvas');
⋮----
const style = getComputedStyle(canvas);
⋮----
style.getPropertyValue('--gradient-color-1').trim(),
style.getPropertyValue('--gradient-color-2').trim(),
style.getPropertyValue('--gradient-color-3').trim(),
style.getPropertyValue('--gradient-color-4').trim()
⋮----
console.error("Cannot get start colors for transition.");
return; // Cannot proceed
⋮----
// Avoid transition if already at target
if (startColors.every((color, i) => color === targetColors[i])) {
console.log("Already at target colors.");
isTransitioning = false; // Ensure flag is clear
⋮----
console.log(`Starting transition to: ${targetColors[0]}`);
⋮----
const startTime = performance.now();
⋮----
// Cancel any previous animation frame request for transitions
if (transitionTimer) cancelAnimationFrame(transitionTimer);
⋮----
const animate = (currentTime) => {
if (!isTransitioning) return; // Stop if flag was cleared externally
⋮----
let progress = Math.min(elapsed / transitionDuration, 1);
// Optional easing
progress = progress < 0.5 ? 2 * progress * progress : 1 - Math.pow(-2 * progress + 2, 2) / 2;
⋮----
const interpolatedColors = startColors.map((startColor, i) =>
interpolateColor(startColor, targetColors[i], progress)
⋮----
// Update the gradient via the instance method
⋮----
window.myGradientInstance.updateColors(interpolatedColors);
⋮----
console.error("Gradient instance lost during transition!");
isTransitioning = false; // Halt
⋮----
transitionTimer = requestAnimationFrame(animate);
⋮----
console.log("Transition finished.");
⋮----
// Ensure final state is exact
⋮----
window.myGradientInstance.updateColors(targetColors);
⋮----
/**
 * Cycles to the next gradient set in the `gradientSets` array.
 */
export function cycleGradientSet() {
⋮----
// Don't cycle if in blog mode (previousSetBeforeBlog is saved)
⋮----
console.log("Cycle skipped: In blog mode.");
⋮----
console.log(`Cycling to set ${currentSetIndex}: ${gradientSets[currentSetIndex].name}`);
transitionTo(gradientSets[currentSetIndex].colors);
⋮----
/**
 * Sets a random gradient from the available sets
 */
export function randomizeGradient() {
⋮----
// Don't change if in blog mode
⋮----
console.log("Random gradient skipped: In blog mode.");
⋮----
// Pick a random set different from the current one
⋮----
newIndex = Math.floor(Math.random() * gradientSets.length);
⋮----
console.log(`Setting random gradient: ${gradientSets[currentSetIndex].name}`);
⋮----
/**
 * Sets the gradient to blog mode or restores the previous state.
 * @param {boolean} isBlogPage - True if navigating to a blog page, false otherwise.
 */
export function setBlogMode(isBlogPage) {
⋮----
// Decide how to handle this - maybe cancel current transition?
console.warn("Blog mode change requested during transition. Ignoring for now.");
⋮----
// Check if we should use window.gradientManager from GradientCanvas.astro
⋮----
const isBlogArticle = document.body.classList.contains('blog-article') ||
window.location.pathname.includes('/blog/');
window.gradientManager.handlePageChange();
⋮----
// Fallback to using myGradientInstance
⋮----
console.warn("Cannot set blog mode: Gradient instance not ready.");
⋮----
const currentColors = window.myGradientInstance.sectionColors.map(rgbArrayToHex);
const isCurrentlyBlogMode = currentColors[0] === blogReadingSet.colors[0]; // Simple check
⋮----
// Entering blog mode
previousSetBeforeBlog = [...currentColors]; // Save current colors
console.log("Entering blog mode. Saving previous colors:", previousSetBeforeBlog);
transitionTo(blogReadingSet.colors);
⋮----
// Leaving blog mode
⋮----
console.log("Leaving blog mode. Restoring colors:", previousSetBeforeBlog);
transitionTo(previousSetBeforeBlog);
// Find the index corresponding to the restored set
currentSetIndex = gradientSets.findIndex(set => set.colors[0] === previousSetBeforeBlog[0]);
if (currentSetIndex === -1) currentSetIndex = 0; // Default if not found
previousSetBeforeBlog = null; // Clear saved state
⋮----
// Was in blog mode but no previous state saved? Go to default.
console.warn("Leaving blog mode, but no previous state saved. Going to default set.");
⋮----
// No change needed (e.g., navigating between blog pages, or between non-blog pages)
console.log(`Blog mode check: No change needed. isBlogPage=${isBlogPage}, isCurrentlyBlogMode=${isCurrentlyBlogMode}`);
// Ensure previousSet is null if not on a blog page
⋮----
/**
 * Check for blog page and set appropriate mode
 */
export function checkForBlogMode() {
const isBlogPage = document.body.classList.contains('blog-article') ||
⋮----
setBlogMode(isBlogPage);
⋮----
// --- Color Helper Functions --- (copied from previous versions)
function interpolateColor(color1, color2, factor) {
const rgb1 = hexToRgb(color1);
const rgb2 = hexToRgb(color2);
if (!rgb1 || !rgb2) return '#000000'; // Fallback
const result = rgb1.map((channel, i) => {
const ch1 = Number(channel);
const ch2 = Number(rgb2[i]);
if (isNaN(ch1) || isNaN(ch2)) return 0;
return Math.max(0, Math.min(255, Math.round(ch1 + factor * (ch2 - ch1))));
⋮----
return rgbArrayToHex(result);
⋮----
function hexToRgb(hex) {
⋮----
hex = hex.replace(/^#/, '');
⋮----
if (hex.length !== 6 || !/^[0-9a-fA-F]{6}$/.test(hex)) return null;
const bigint = parseInt(hex, 16);
⋮----
function rgbArrayToHex(rgbArray) {
if (!Array.isArray(rgbArray) || rgbArray.length < 3) return '#000000';
const processChannel = (c) => Math.max(0, Math.min(255, Math.round(c))); // Assumes 0-255 input now
const r = processChannel(rgbArray[0]);
const g = processChannel(rgbArray[1]);
const b = processChannel(rgbArray[2]);
if (isNaN(r) || isNaN(g) || isNaN(b)) return '#000000';
const toHex = (c) => c.toString(16).padStart(2, '0');
return `#${toHex(r)}${toHex(g)}${toHex(b)}`;
⋮----
// --- Make functions globally accessible (alternative to imports in specific pages) ---
// This is simpler for calling from inline scripts on different pages.
⋮----
// Initialize when the script loads
⋮----
// Add a listener for page load
document.addEventListener('DOMContentLoaded', () => {
console.log("gradient-controller.js: DOMContentLoaded");
checkForBlogMode();
⋮----
// Add a listener for Astro view transitions
document.addEventListener('astro:page-load', () => {
console.log("gradient-controller.js: astro:page-load");
⋮----
console.log("gradient-controller.js loaded");
</file>

<file path="styles/global.css">
/*
  The CSS in this style tag is based off of Bear Blog's default CSS.
  https://github.com/HermanMartinus/bearblog/blob/297026a877bc2ab2b3bdfbd6b9f7961c350917dd/templates/styles/blog/default.css
  License MIT: https://github.com/HermanMartinus/bearblog/blob/master/LICENSE.md
 */
⋮----
html {
⋮----
:root {
⋮----
.lg\:fixed {
⋮----
.lg\:ml-auto {
⋮----
body {
⋮----
.container {
</file>

<file path="consts.ts">
// Place any global data in this file.
// You can import this data from anywhere in your site by using the `import` keyword.
</file>

<file path="content.config.ts">
import { glob } from 'astro/loaders';
import { defineCollection, z } from 'astro:content';
⋮----
// Load Markdown and MDX files in the `src/content/blog/` directory.
⋮----
// Type-check frontmatter using a schema
⋮----
// Transform string to Date object
</file>

</files>
