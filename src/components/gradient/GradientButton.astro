---
import BaseButton from "../ui/BaseButton.astro";

// Paint bucket icon SVG
const paintBucketIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-palette-icon lucide-palette"><path d="M12 22a1 1 0 0 1 0-20 10 9 0 0 1 10 9 5 5 0 0 1-5 5h-2.25a1.75 1.75 0 0 0-1.4 2.8l.3.4a1.75 1.75 0 0 1-1.4 2.8z"/><circle cx="13.5" cy="6.5" r=".5" fill="currentColor" style="--darkreader-inline-fill: currentColor;" data-darkreader-inline-fill=""/><circle cx="17.5" cy="10.5" r=".5" fill="currentColor" style="--darkreader-inline-fill: currentColor;" data-darkreader-inline-fill=""/><circle cx="6.5" cy="12.5" r=".5" fill="currentColor" style="--darkreader-inline-fill: currentColor;" data-darkreader-inline-fill=""/><circle cx="8.5" cy="7.5" r=".5" fill="currentColor" style="--darkreader-inline-fill: currentColor;" data-darkreader-inline-fill=""/></svg>`;

// Shuffle icon SVG
const shuffleIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-shuffle-icon lucide-shuffle"><path d="m18 14 4 4-4 4"/><path d="m18 2 4 4-4 4"/><path d="M2 18h1.973a4 4 0 0 0 3.3-1.7l5.454-8.6a4 4 0 0 1 3.3-1.7H22"/><path d="M2 6h1.972a4 4 0 0 1 3.6 2.2"/><path d="M22 18h-6.041a4 4 0 0 1-3.3-1.8l-.359-.45"/></svg>`;
---

<BaseButton
  id="cycle-button"
  ariaLabel="Cycle gradient colors"
  class="social-link"
>
  <span class="icon" set:html={paintBucketIcon} />
  <span class="tooltip">Cycle Colors</span>
</BaseButton>

<script>
  // Define types for better TypeScript support
  type ButtonElement = HTMLButtonElement;
  type ActionFunction = () => void;

  // Spinner SVG for loading state
  const spinnerIcon = `<svg xmlns="https://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="animate-spin"><path d="M21 12a9 9 0 1 1-6.219-8.56"></path></svg>`;

  // Original SVGs (Using updated icons)
  const cycleIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-palette-icon lucide-palette"><path d="M12 22a1 1 0 0 1 0-20 10 9 0 0 1 10 9 5 5 0 0 1-5 5h-2.25a1.75 1.75 0 0 0-1.4 2.8l.3.4a1.75 1.75 0 0 1-1.4 2.8z"/><circle cx="13.5" cy="6.5" r=".5" fill="currentColor" style="--darkreader-inline-fill: currentColor;" data-darkreader-inline-fill=""/><circle cx="17.5" cy="10.5" r=".5" fill="currentColor" style="--darkreader-inline-fill: currentColor;" data-darkreader-inline-fill=""/><circle cx="6.5" cy="12.5" r=".5" fill="currentColor" style="--darkreader-inline-fill: currentColor;" data-darkreader-inline-fill=""/><circle cx="8.5" cy="7.5" r=".5" fill="currentColor" style="--darkreader-inline-fill: currentColor;" data-darkreader-inline-fill=""/></svg>`;

  const randomIcon = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-shuffle-icon lucide-shuffle"><path d="m18 14 4 4-4 4"/><path d="m18 2 4 4-4 4"/><path d="M2 18h1.973a4 4 0 0 0 3.3-1.7l5.454-8.6a4 4 0 0 1 3.3-1.7H22"/><path d="M2 6h1.972a4 4 0 0 1 3.6 2.2"/><path d="M22 18h-6.041a4 4 0 0 1-3.3-1.8l-.359-.45"/></svg>`;

  // Function to show loading state on a button
  function setButtonLoading(button: ButtonElement, isLoading: boolean): void {
    const iconEl = button.querySelector(".icon");

    if (isLoading) {
      button.classList.add("loading");
      button.disabled = true;

      // Replace icon with spinner
      if (iconEl) {
        iconEl.innerHTML = spinnerIcon;
      }
    } else {
      button.classList.remove("loading");
      button.disabled = false;

      // Restore original icon
      if (iconEl) {
        const isCycleButton = button.id === "cycle-button";
        // Ensure the correct icon is restored based on button ID
        iconEl.innerHTML = isCycleButton ? cycleIcon : randomIcon;
      }
    }
  }

  // Handle button clicks with debouncing/loading state
  function handleButtonClick(
    button: ButtonElement,
    actionFn: ActionFunction
  ): void {
    // Check if already loading to prevent multiple clicks
    if (button.classList.contains("loading")) return;

    // Set loading state
    setButtonLoading(button, true);

    // Call the action function
    try {
      actionFn();
    } catch (error) {
      console.error("Error during button action:", error);
      // Optionally reset button state immediately on error
      setButtonLoading(button, false);
      return; // Stop further execution in case of error
    }

    // Reset after a timeout (e.g., 1 second)
    // Adjust timeout as needed, potentially based on gradient transition duration
    setTimeout(() => {
      setButtonLoading(button, false);
    }, 1000);
  }

  // Function to set up event listeners for the buttons
  function setupButtonListeners(): void {
    console.log("Setting up gradient button listeners");

    const cycleButton = document.getElementById(
      "cycle-button"
    ) as HTMLButtonElement | null;
    const randomButton = document.getElementById(
      "random-button"
    ) as HTMLButtonElement | null;

    // --- Event Listener Logic ---
    // Remove previous listeners to prevent duplicates on HMR or Astro page transitions
    if (cycleButton && cycleButton.parentNode) {
      const newCycleButton = cycleButton.cloneNode(true) as HTMLButtonElement;
      cycleButton.parentNode.replaceChild(newCycleButton, cycleButton);

      newCycleButton.addEventListener("click", () => {
        console.log("Cycle button clicked");
        handleButtonClick(newCycleButton, () => {
          // Check for different possible global function names/objects
          if (
            window.gradientManager &&
            typeof window.gradientManager.nextGradient === "function"
          ) {
            window.gradientManager.nextGradient();
          } else if (typeof window.cycleGradientSet === "function") {
            window.cycleGradientSet();
          } else {
            console.error(
              "No gradient cycling function found on window.gradientManager or window.cycleGradientSet"
            );
          }
        });
      });
    }

    if (randomButton && randomButton.parentNode) {
      const newRandomButton = randomButton.cloneNode(true) as HTMLButtonElement;
      randomButton.parentNode.replaceChild(newRandomButton, randomButton);

      newRandomButton.addEventListener("click", () => {
        console.log("Random button clicked");
        handleButtonClick(newRandomButton, () => {
          // Check for different possible global function names/objects
          if (
            window.gradientManager &&
            typeof window.gradientManager.randomGradient === "function"
          ) {
            window.gradientManager.randomGradient();
          } else if (typeof window.randomizeGradient === "function") {
            window.randomizeGradient();
          } else {
            console.error(
              "No gradient randomize function found on window.gradientManager or window.randomizeGradient"
            );
          }
        });
      });
    }
  }

  // --- Initialization Logic ---
  // Use a flag to ensure setup runs only once per full page load/transition sequence
  let listenersInitialized = false;

  function initializeIfNeeded(): void {
    if (!listenersInitialized) {
      setupButtonListeners();
      listenersInitialized = true;
    }
  }

  // Try setting up listeners on initial load
  if (document.readyState === "loading") {
    // Loading hasn't finished yet
    document.addEventListener("DOMContentLoaded", initializeIfNeeded);
  } else {
    // `DOMContentLoaded` has already fired or state is 'interactive'/'complete'
    initializeIfNeeded();
  }

  // Re-attach listeners after Astro view transitions
  // Reset the flag on page load to allow re-initialization
  document.addEventListener("astro:page-load", () => {
    console.log("Astro page load detected, re-initializing listeners.");
    listenersInitialized = false; // Reset flag
    initializeIfNeeded(); // Re-run setup
  });

  // Add TypeScript interface for window global objects
  interface Window {
    gradientManager?: {
      nextGradient?: () => void;
      randomGradient?: () => void;
    };
    cycleGradientSet?: () => void;
    randomizeGradient?: () => void;
  }
</script>

<style>
  /* Additional specific styles for gradient controls */
  .icon {
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0.9;
    z-index: 1;
    filter: drop-shadow(0 1px 1px rgba(0, 0, 0, 0.1));
    transition: transform 0.2s ease;
  }

  :global(.social-link:hover:not(:disabled)) .icon {
    transform: scale(1.1);
  }

  /* Tooltip styling */
  .tooltip {
    position: absolute;
    bottom: -30px;
    left: 50%;
    transform: translateX(-50%) translateY(8px);
    padding: 0.25rem 0.75rem;
    border-radius: 6px;
    background-color: rgba(0, 0, 0, 0.75);
    color: white;
    font-size: 0.75rem;
    white-space: nowrap;
    pointer-events: none;
    opacity: 0;
    transition:
      opacity 0.2s ease,
      transform 0.2s ease;
    z-index: 10;
  }

  :global(.social-link:hover:not(:disabled)) .tooltip {
    opacity: 1;
    transform: translateX(-50%) translateY(0);
  }

  /* Animation for the spinning loader */
  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }
</style>
